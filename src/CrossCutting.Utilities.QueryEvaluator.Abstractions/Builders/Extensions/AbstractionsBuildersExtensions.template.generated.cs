// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 9.0.9
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.Extensions
{
    public static partial class ConditionBuilderExtensions
    {
        public static T WithCombination<T>(this T instance, System.Nullable<CrossCutting.Utilities.QueryEvaluator.Abstractions.Domains.Combination> combination)
            where T : CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder
        {
            instance.Combination = combination;
            return instance;
        }

        public static T WithStartGroup<T>(this T instance, bool startGroup = true)
            where T : CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder
        {
            instance.StartGroup = startGroup;
            return instance;
        }

        public static T WithEndGroup<T>(this T instance, bool endGroup = true)
            where T : CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder
        {
            instance.EndGroup = endGroup;
            return instance;
        }
    }
    public static partial class DataObjectNameQueryBuilderExtensions
    {
        public static T WithDataObjectName<T>(this T instance, string dataObjectName)
            where T : CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IDataObjectNameQueryBuilder
        {
            if (dataObjectName is null) throw new System.ArgumentNullException(nameof(dataObjectName));
            instance.DataObjectName = dataObjectName;
            return instance;
        }
    }
    public static partial class DoubleExpressionContainerBuilderExtensions
    {
        public static T WithCompareExpression<T>(this T instance, CrossCutting.Utilities.ExpressionEvaluator.Builders.Abstractions.IExpressionBuilder compareExpression)
            where T : CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IDoubleExpressionContainerBuilder
        {
            if (compareExpression is null) throw new System.ArgumentNullException(nameof(compareExpression));
            instance.CompareExpression = compareExpression;
            return instance;
        }
    }
    public static partial class FieldSelectionQueryBuilderExtensions
    {
        public static T AddFieldNames<T>(this T instance, System.Collections.Generic.IEnumerable<string> fieldNames)
            where T : CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IFieldSelectionQueryBuilder
        {
            if (fieldNames is null) throw new System.ArgumentNullException(nameof(fieldNames));
            return instance.AddFieldNames<T>(fieldNames.ToArray());
        }

        public static T AddFieldNames<T>(this T instance, params string[] fieldNames)
            where T : CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IFieldSelectionQueryBuilder
        {
            if (fieldNames is null) throw new System.ArgumentNullException(nameof(fieldNames));
            foreach (var item in fieldNames) instance.FieldNames.Add(item);
            return instance;
        }

        public static T WithDistinct<T>(this T instance, bool distinct = true)
            where T : CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IFieldSelectionQueryBuilder
        {
            instance.Distinct = distinct;
            return instance;
        }

        public static T WithGetAllFields<T>(this T instance, bool getAllFields = true)
            where T : CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IFieldSelectionQueryBuilder
        {
            instance.GetAllFields = getAllFields;
            return instance;
        }
    }
    public static partial class InConditionBuilderExtensions
    {
        public static T AddCompareExpressions<T>(this T instance, System.Collections.Generic.IEnumerable<CrossCutting.Utilities.ExpressionEvaluator.Builders.Abstractions.IExpressionBuilder> compareExpressions)
            where T : CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IInConditionBuilder
        {
            if (compareExpressions is null) throw new System.ArgumentNullException(nameof(compareExpressions));
            return instance.AddCompareExpressions<T>(compareExpressions.ToArray());
        }

        public static T AddCompareExpressions<T>(this T instance, params CrossCutting.Utilities.ExpressionEvaluator.Builders.Abstractions.IExpressionBuilder[] compareExpressions)
            where T : CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IInConditionBuilder
        {
            if (compareExpressions is null) throw new System.ArgumentNullException(nameof(compareExpressions));
            foreach (var item in compareExpressions) instance.CompareExpressions.Add(item);
            return instance;
        }

        public static T WithSourceExpression<T>(this T instance, CrossCutting.Utilities.ExpressionEvaluator.Builders.Abstractions.IExpressionBuilder sourceExpression)
            where T : CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IInConditionBuilder
        {
            if (sourceExpression is null) throw new System.ArgumentNullException(nameof(sourceExpression));
            instance.SourceExpression = sourceExpression;
            return instance;
        }
    }
    public static partial class QueryBuilderExtensions
    {
        public static T AddConditions<T>(this T instance, System.Collections.Generic.IEnumerable<CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder> conditions)
            where T : CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IQueryBuilder
        {
            if (conditions is null) throw new System.ArgumentNullException(nameof(conditions));
            return instance.AddConditions<T>(conditions.ToArray());
        }

        public static T AddConditions<T>(this T instance, params CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder[] conditions)
            where T : CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IQueryBuilder
        {
            if (conditions is null) throw new System.ArgumentNullException(nameof(conditions));
            foreach (var item in conditions) instance.Conditions.Add(item);
            return instance;
        }

        public static T AddSortOrders<T>(this T instance, System.Collections.Generic.IEnumerable<CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISortOrderBuilder> sortOrders)
            where T : CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IQueryBuilder
        {
            if (sortOrders is null) throw new System.ArgumentNullException(nameof(sortOrders));
            return instance.AddSortOrders<T>(sortOrders.ToArray());
        }

        public static T AddSortOrders<T>(this T instance, params CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISortOrderBuilder[] sortOrders)
            where T : CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IQueryBuilder
        {
            if (sortOrders is null) throw new System.ArgumentNullException(nameof(sortOrders));
            foreach (var item in sortOrders) instance.SortOrders.Add(item);
            return instance;
        }

        public static T WithLimit<T>(this T instance, System.Nullable<int> limit)
            where T : CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IQueryBuilder
        {
            instance.Limit = limit;
            return instance;
        }

        public static T WithOffset<T>(this T instance, System.Nullable<int> offset)
            where T : CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IQueryBuilder
        {
            instance.Offset = offset;
            return instance;
        }
    }
    public static partial class SingleExpressionContainerBuilderExtensions
    {
        public static T WithSourceExpression<T>(this T instance, CrossCutting.Utilities.ExpressionEvaluator.Builders.Abstractions.IExpressionBuilder sourceExpression)
            where T : CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISingleExpressionContainerBuilder
        {
            if (sourceExpression is null) throw new System.ArgumentNullException(nameof(sourceExpression));
            instance.SourceExpression = sourceExpression;
            return instance;
        }
    }
    public static partial class SortOrderBuilderExtensions
    {
        public static T WithExpression<T>(this T instance, CrossCutting.Utilities.ExpressionEvaluator.Builders.Abstractions.IExpressionBuilder expression)
            where T : CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISortOrderBuilder
        {
            if (expression is null) throw new System.ArgumentNullException(nameof(expression));
            instance.Expression = expression;
            return instance;
        }

        public static T WithOrder<T>(this T instance, CrossCutting.Utilities.QueryEvaluator.Abstractions.Domains.SortOrderDirection order)
            where T : CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISortOrderBuilder
        {
            instance.Order = order;
            return instance;
        }
    }
    public static partial class StringComparisonContainerBuilderExtensions
    {
        public static T WithStringComparison<T>(this T instance, System.StringComparison stringComparison)
            where T : CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IStringComparisonContainerBuilder
        {
            instance.StringComparison = stringComparison;
            return instance;
        }
    }
}
#nullable disable
