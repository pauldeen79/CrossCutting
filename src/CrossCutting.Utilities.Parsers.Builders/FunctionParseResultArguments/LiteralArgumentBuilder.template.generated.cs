// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 7.0.5
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace CrossCutting.Utilities.Parsers.Builders.FunctionParseResultArguments
{
#nullable enable
    public partial class LiteralArgumentBuilder : CrossCutting.Utilities.Parsers.Builders.FunctionParseResultArgumentBuilder<LiteralArgumentBuilder, CrossCutting.Utilities.Parsers.FunctionParseResultArguments.LiteralArgument>
    {
        public System.Text.StringBuilder Value
        {
            get
            {
                return _valueDelegate.Value;
            }
            set
            {
                _valueDelegate = new (() => value);
            }
        }

        public override CrossCutting.Utilities.Parsers.FunctionParseResultArguments.LiteralArgument BuildTyped()
        {
            #pragma warning disable CS8604 // Possible null reference argument.
            #pragma warning disable CS8600 // Converting null literal or possible null value to non-nullable type.
            return new CrossCutting.Utilities.Parsers.FunctionParseResultArguments.LiteralArgument(Value?.ToString());
            #pragma warning restore CS8600 // Converting null literal or possible null value to non-nullable type.
            #pragma warning restore CS8604 // Possible null reference argument.
        }

        public System.Collections.Generic.IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(System.ComponentModel.DataAnnotations.ValidationContext validationContext)
        {
            #pragma warning disable CS8604 // Possible null reference argument.
            #pragma warning disable CS8600 // Converting null literal or possible null value to non-nullable type.
            var instance = new CrossCutting.Utilities.Parsers.FunctionParseResultArguments.LiteralArgumentBase(Value?.ToString());
            #pragma warning restore CS8600 // Converting null literal or possible null value to non-nullable type.
            #pragma warning restore CS8604 // Possible null reference argument.
            var results = new System.Collections.Generic.List<System.ComponentModel.DataAnnotations.ValidationResult>();
            System.ComponentModel.DataAnnotations.Validator.TryValidateObject(instance, new System.ComponentModel.DataAnnotations.ValidationContext(instance, null, null), results, true);
            return results;
        }

        public LiteralArgumentBuilder WithValue(System.Text.StringBuilder value)
        {
            Value = value;
            return this;
        }

        public LiteralArgumentBuilder WithValue(System.Func<System.Text.StringBuilder> valueDelegate)
        {
            _valueDelegate = new (valueDelegate);
            return this;
        }

        public LiteralArgumentBuilder WithValue(string value)
        {
            if (Value == null)
                Value = new System.Text.StringBuilder();
            Value.Clear().Append(value);
            return this;
        }

        public LiteralArgumentBuilder AppendToValue(string value)
        {
            if (Value == null)
                Value = new System.Text.StringBuilder();
            Value.Append(value);
            return this;
        }

        public LiteralArgumentBuilder AppendLineToValue(string value)
        {
            if (Value == null)
                Value = new System.Text.StringBuilder();
            Value.AppendLine(value);
            return this;
        }

        public LiteralArgumentBuilder() : base()
        {
            #pragma warning disable CS8603 // Possible null reference return.
            _valueDelegate = new (() => new System.Text.StringBuilder());
            #pragma warning restore CS8603 // Possible null reference return.
        }

        public LiteralArgumentBuilder(CrossCutting.Utilities.Parsers.FunctionParseResultArguments.LiteralArgument source) : base(source)
        {
            _valueDelegate = new (() => new System.Text.StringBuilder(source.Value));
        }

        protected System.Lazy<System.Text.StringBuilder> _valueDelegate;
    }
#nullable restore
}

