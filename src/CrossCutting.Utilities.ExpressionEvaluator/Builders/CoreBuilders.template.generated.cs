// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 9.0.4
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace CrossCutting.Utilities.ExpressionEvaluator.Builders
{
    public partial class ExpressionEvaluatorSettingsBuilder : System.ComponentModel.INotifyPropertyChanged
    {
        private System.IFormatProvider _formatProvider;

        private System.StringComparison _stringComparison;

        private int _maximumRecursion;

        private bool _escapeBraces;

        private bool _validateArgumentTypes;

        private bool _strictTypeChecking;

        private string _placeholderStart;

        private string _placeholderEnd;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        public System.IFormatProvider FormatProvider
        {
            get
            {
                return _formatProvider;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.IFormatProvider>.Default.Equals(_formatProvider!, value!);
                _formatProvider = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(FormatProvider));
            }
        }

        public System.StringComparison StringComparison
        {
            get
            {
                return _stringComparison;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.StringComparison>.Default.Equals(_stringComparison, value);
                _stringComparison = value;
                if (hasChanged) HandlePropertyChanged(nameof(StringComparison));
            }
        }

        [System.ComponentModel.DefaultValueAttribute(10)]
        public int MaximumRecursion
        {
            get
            {
                return _maximumRecursion;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Int32>.Default.Equals(_maximumRecursion, value);
                _maximumRecursion = value;
                if (hasChanged) HandlePropertyChanged(nameof(MaximumRecursion));
            }
        }

        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool EscapeBraces
        {
            get
            {
                return _escapeBraces;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_escapeBraces, value);
                _escapeBraces = value;
                if (hasChanged) HandlePropertyChanged(nameof(EscapeBraces));
            }
        }

        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool ValidateArgumentTypes
        {
            get
            {
                return _validateArgumentTypes;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_validateArgumentTypes, value);
                _validateArgumentTypes = value;
                if (hasChanged) HandlePropertyChanged(nameof(ValidateArgumentTypes));
            }
        }

        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool StrictTypeChecking
        {
            get
            {
                return _strictTypeChecking;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_strictTypeChecking, value);
                _strictTypeChecking = value;
                if (hasChanged) HandlePropertyChanged(nameof(StrictTypeChecking));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [System.ComponentModel.DefaultValueAttribute(@"{")]
        public string PlaceholderStart
        {
            get
            {
                return _placeholderStart;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_placeholderStart!, value!);
                _placeholderStart = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(PlaceholderStart));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [System.ComponentModel.DefaultValueAttribute(@"}")]
        public string PlaceholderEnd
        {
            get
            {
                return _placeholderEnd;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_placeholderEnd!, value!);
                _placeholderEnd = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(PlaceholderEnd));
            }
        }

        public ExpressionEvaluatorSettingsBuilder(CrossCutting.Utilities.ExpressionEvaluator.ExpressionEvaluatorSettings source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _formatProvider = source.FormatProvider;
            _stringComparison = source.StringComparison;
            _maximumRecursion = source.MaximumRecursion;
            _escapeBraces = source.EscapeBraces;
            _validateArgumentTypes = source.ValidateArgumentTypes;
            _strictTypeChecking = source.StrictTypeChecking;
            _placeholderStart = source.PlaceholderStart;
            _placeholderEnd = source.PlaceholderEnd;
        }

        public ExpressionEvaluatorSettingsBuilder()
        {
            _formatProvider = System.Globalization.CultureInfo.InvariantCulture!;
            _maximumRecursion = 10;
            _escapeBraces = true;
            _validateArgumentTypes = true;
            _strictTypeChecking = false;
            _placeholderStart = @"{"!;
            _placeholderEnd = @"}"!;
            SetDefaultValues();
        }

        public CrossCutting.Utilities.ExpressionEvaluator.ExpressionEvaluatorSettings Build()
        {
            return new CrossCutting.Utilities.ExpressionEvaluator.ExpressionEvaluatorSettings(FormatProvider, StringComparison, MaximumRecursion, EscapeBraces, ValidateArgumentTypes, StrictTypeChecking, PlaceholderStart, PlaceholderEnd);
        }

        partial void SetDefaultValues();

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.ExpressionEvaluatorSettingsBuilder WithFormatProvider(System.IFormatProvider formatProvider)
        {
            if (formatProvider is null) throw new System.ArgumentNullException(nameof(formatProvider));
            FormatProvider = formatProvider;
            return this;
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.ExpressionEvaluatorSettingsBuilder WithStringComparison(System.StringComparison stringComparison)
        {
            StringComparison = stringComparison;
            return this;
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.ExpressionEvaluatorSettingsBuilder WithMaximumRecursion(int maximumRecursion)
        {
            MaximumRecursion = maximumRecursion;
            return this;
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.ExpressionEvaluatorSettingsBuilder WithEscapeBraces(bool escapeBraces = true)
        {
            EscapeBraces = escapeBraces;
            return this;
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.ExpressionEvaluatorSettingsBuilder WithValidateArgumentTypes(bool validateArgumentTypes = true)
        {
            ValidateArgumentTypes = validateArgumentTypes;
            return this;
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.ExpressionEvaluatorSettingsBuilder WithStrictTypeChecking(bool strictTypeChecking = true)
        {
            StrictTypeChecking = strictTypeChecking;
            return this;
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.ExpressionEvaluatorSettingsBuilder WithPlaceholderStart(string placeholderStart)
        {
            if (placeholderStart is null) throw new System.ArgumentNullException(nameof(placeholderStart));
            PlaceholderStart = placeholderStart;
            return this;
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.ExpressionEvaluatorSettingsBuilder WithPlaceholderEnd(string placeholderEnd)
        {
            if (placeholderEnd is null) throw new System.ArgumentNullException(nameof(placeholderEnd));
            PlaceholderEnd = placeholderEnd;
            return this;
        }

        public static implicit operator CrossCutting.Utilities.ExpressionEvaluator.ExpressionEvaluatorSettings(ExpressionEvaluatorSettingsBuilder entity)
        {
            return entity.Build();
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public partial class ExpressionParsePartResultBuilder : CrossCutting.Utilities.ExpressionEvaluator.Builders.Abstractions.IParseResultBuilder, System.ComponentModel.INotifyPropertyChanged
    {
        private string _partName;

        private System.Collections.Generic.List<CrossCutting.Utilities.ExpressionEvaluator.Builders.ExpressionParsePartResultBuilder> _partResults;

        private CrossCutting.Common.Results.ResultStatus _status;

        private System.Collections.Generic.List<CrossCutting.Common.Results.ValidationError> _validationErrors;

        private string? _errorMessage;

        private string _sourceExpression;

        private System.Type? _expressionComponentType;

        private System.Type? _resultType;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string PartName
        {
            get
            {
                return _partName;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_partName!, value!);
                _partName = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(PartName));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.Generic.List<CrossCutting.Utilities.ExpressionEvaluator.Builders.ExpressionParsePartResultBuilder> PartResults
        {
            get
            {
                return _partResults;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<CrossCutting.Utilities.ExpressionEvaluator.Builders.ExpressionParsePartResultBuilder>>.Default.Equals(_partResults!, value!);
                _partResults = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(PartResults));
            }
        }

        public CrossCutting.Common.Results.ResultStatus Status
        {
            get
            {
                return _status;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<CrossCutting.Common.Results.ResultStatus>.Default.Equals(_status, value);
                _status = value;
                if (hasChanged) HandlePropertyChanged(nameof(Status));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public System.Collections.Generic.List<CrossCutting.Common.Results.ValidationError> ValidationErrors
        {
            get
            {
                return _validationErrors;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.List<CrossCutting.Common.Results.ValidationError>>.Default.Equals(_validationErrors!, value!);
                _validationErrors = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(ValidationErrors));
            }
        }

        public string? ErrorMessage
        {
            get
            {
                return _errorMessage;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_errorMessage!, value!);
                _errorMessage = value;
                if (hasChanged) HandlePropertyChanged(nameof(ErrorMessage));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string SourceExpression
        {
            get
            {
                return _sourceExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_sourceExpression!, value!);
                _sourceExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(SourceExpression));
            }
        }

        public System.Type? ExpressionComponentType
        {
            get
            {
                return _expressionComponentType;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Type>.Default.Equals(_expressionComponentType!, value!);
                _expressionComponentType = value;
                if (hasChanged) HandlePropertyChanged(nameof(ExpressionComponentType));
            }
        }

        public System.Type? ResultType
        {
            get
            {
                return _resultType;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Type>.Default.Equals(_resultType!, value!);
                _resultType = value;
                if (hasChanged) HandlePropertyChanged(nameof(ResultType));
            }
        }

        public ExpressionParsePartResultBuilder(CrossCutting.Utilities.ExpressionEvaluator.ExpressionParsePartResult source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _partResults = new System.Collections.Generic.List<CrossCutting.Utilities.ExpressionEvaluator.Builders.ExpressionParsePartResultBuilder>();
            _validationErrors = new System.Collections.Generic.List<CrossCutting.Common.Results.ValidationError>();
            _partName = source.PartName;
            if (source.PartResults is not null) foreach (var item in source.PartResults.Select(x => x.ToBuilder())) _partResults.Add(item);
            _status = source.Status;
            if (source.ValidationErrors is not null) foreach (var item in source.ValidationErrors) _validationErrors.Add(item);
            _errorMessage = source.ErrorMessage;
            _sourceExpression = source.SourceExpression;
            _expressionComponentType = source.ExpressionComponentType;
            _resultType = source.ResultType;
        }

        public ExpressionParsePartResultBuilder()
        {
            _partResults = new System.Collections.Generic.List<CrossCutting.Utilities.ExpressionEvaluator.Builders.ExpressionParsePartResultBuilder>();
            _validationErrors = new System.Collections.Generic.List<CrossCutting.Common.Results.ValidationError>();
            _partName = string.Empty;
            _sourceExpression = string.Empty;
            SetDefaultValues();
        }

        public CrossCutting.Utilities.ExpressionEvaluator.ExpressionParsePartResult Build()
        {
            return new CrossCutting.Utilities.ExpressionEvaluator.ExpressionParsePartResult(PartName, PartResults.Select(x => x.Build()!).ToList().AsReadOnly(), Status, ValidationErrors, ErrorMessage, SourceExpression, ExpressionComponentType, ResultType);
        }

        partial void SetDefaultValues();

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.ExpressionParsePartResultBuilder AddPartResults(System.Collections.Generic.IEnumerable<CrossCutting.Utilities.ExpressionEvaluator.Builders.ExpressionParsePartResultBuilder> partResults)
        {
            if (partResults is null) throw new System.ArgumentNullException(nameof(partResults));
            return AddPartResults(partResults.ToArray());
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.ExpressionParsePartResultBuilder AddPartResults(params CrossCutting.Utilities.ExpressionEvaluator.Builders.ExpressionParsePartResultBuilder[] partResults)
        {
            if (partResults is null) throw new System.ArgumentNullException(nameof(partResults));
            foreach (var item in partResults) PartResults.Add(item);
            return this;
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.ExpressionParsePartResultBuilder WithPartName(string partName)
        {
            if (partName is null) throw new System.ArgumentNullException(nameof(partName));
            PartName = partName;
            return this;
        }

        public static implicit operator CrossCutting.Utilities.ExpressionEvaluator.ExpressionParsePartResult(ExpressionParsePartResultBuilder entity)
        {
            return entity.Build();
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public partial class ExpressionParseResultBuilder : CrossCutting.Utilities.ExpressionEvaluator.Builders.Abstractions.IParseResultBuilder, System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.Generic.List<CrossCutting.Utilities.ExpressionEvaluator.Builders.ExpressionParsePartResultBuilder> _partResults;

        private CrossCutting.Common.Results.ResultStatus _status;

        private System.Collections.Generic.List<CrossCutting.Common.Results.ValidationError> _validationErrors;

        private string? _errorMessage;

        private string _sourceExpression;

        private System.Type? _expressionComponentType;

        private System.Type? _resultType;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.Generic.List<CrossCutting.Utilities.ExpressionEvaluator.Builders.ExpressionParsePartResultBuilder> PartResults
        {
            get
            {
                return _partResults;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<CrossCutting.Utilities.ExpressionEvaluator.Builders.ExpressionParsePartResultBuilder>>.Default.Equals(_partResults!, value!);
                _partResults = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(PartResults));
            }
        }

        public CrossCutting.Common.Results.ResultStatus Status
        {
            get
            {
                return _status;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<CrossCutting.Common.Results.ResultStatus>.Default.Equals(_status, value);
                _status = value;
                if (hasChanged) HandlePropertyChanged(nameof(Status));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public System.Collections.Generic.List<CrossCutting.Common.Results.ValidationError> ValidationErrors
        {
            get
            {
                return _validationErrors;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.List<CrossCutting.Common.Results.ValidationError>>.Default.Equals(_validationErrors!, value!);
                _validationErrors = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(ValidationErrors));
            }
        }

        public string? ErrorMessage
        {
            get
            {
                return _errorMessage;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_errorMessage!, value!);
                _errorMessage = value;
                if (hasChanged) HandlePropertyChanged(nameof(ErrorMessage));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string SourceExpression
        {
            get
            {
                return _sourceExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_sourceExpression!, value!);
                _sourceExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(SourceExpression));
            }
        }

        public System.Type? ExpressionComponentType
        {
            get
            {
                return _expressionComponentType;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Type>.Default.Equals(_expressionComponentType!, value!);
                _expressionComponentType = value;
                if (hasChanged) HandlePropertyChanged(nameof(ExpressionComponentType));
            }
        }

        public System.Type? ResultType
        {
            get
            {
                return _resultType;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Type>.Default.Equals(_resultType!, value!);
                _resultType = value;
                if (hasChanged) HandlePropertyChanged(nameof(ResultType));
            }
        }

        public ExpressionParseResultBuilder(CrossCutting.Utilities.ExpressionEvaluator.ExpressionParseResult source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _partResults = new System.Collections.Generic.List<CrossCutting.Utilities.ExpressionEvaluator.Builders.ExpressionParsePartResultBuilder>();
            _validationErrors = new System.Collections.Generic.List<CrossCutting.Common.Results.ValidationError>();
            if (source.PartResults is not null) foreach (var item in source.PartResults.Select(x => x.ToBuilder())) _partResults.Add(item);
            _status = source.Status;
            if (source.ValidationErrors is not null) foreach (var item in source.ValidationErrors) _validationErrors.Add(item);
            _errorMessage = source.ErrorMessage;
            _sourceExpression = source.SourceExpression;
            _expressionComponentType = source.ExpressionComponentType;
            _resultType = source.ResultType;
        }

        public ExpressionParseResultBuilder()
        {
            _partResults = new System.Collections.Generic.List<CrossCutting.Utilities.ExpressionEvaluator.Builders.ExpressionParsePartResultBuilder>();
            _validationErrors = new System.Collections.Generic.List<CrossCutting.Common.Results.ValidationError>();
            _sourceExpression = string.Empty;
            SetDefaultValues();
        }

        public CrossCutting.Utilities.ExpressionEvaluator.ExpressionParseResult Build()
        {
            return new CrossCutting.Utilities.ExpressionEvaluator.ExpressionParseResult(PartResults.Select(x => x.Build()!).ToList().AsReadOnly(), Status, ValidationErrors, ErrorMessage, SourceExpression, ExpressionComponentType, ResultType);
        }

        partial void SetDefaultValues();

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.ExpressionParseResultBuilder AddPartResults(System.Collections.Generic.IEnumerable<CrossCutting.Utilities.ExpressionEvaluator.Builders.ExpressionParsePartResultBuilder> partResults)
        {
            if (partResults is null) throw new System.ArgumentNullException(nameof(partResults));
            return AddPartResults(partResults.ToArray());
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.ExpressionParseResultBuilder AddPartResults(params CrossCutting.Utilities.ExpressionEvaluator.Builders.ExpressionParsePartResultBuilder[] partResults)
        {
            if (partResults is null) throw new System.ArgumentNullException(nameof(partResults));
            foreach (var item in partResults) PartResults.Add(item);
            return this;
        }

        public static implicit operator CrossCutting.Utilities.ExpressionEvaluator.ExpressionParseResult(ExpressionParseResultBuilder entity)
        {
            return entity.Build();
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public partial class FunctionCallBuilder : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;

        private System.Collections.Generic.List<string> _arguments;

        private System.Collections.Generic.List<System.Type> _typeArguments;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_name!, value!);
                _name = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Name));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.Generic.List<string> Arguments
        {
            get
            {
                return _arguments;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.List<System.String>>.Default.Equals(_arguments!, value!);
                _arguments = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Arguments));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public System.Collections.Generic.List<System.Type> TypeArguments
        {
            get
            {
                return _typeArguments;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.List<System.Type>>.Default.Equals(_typeArguments!, value!);
                _typeArguments = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(TypeArguments));
            }
        }

        public FunctionCallBuilder(CrossCutting.Utilities.ExpressionEvaluator.FunctionCall source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _arguments = new System.Collections.Generic.List<string>();
            _typeArguments = new System.Collections.Generic.List<System.Type>();
            _name = source.Name;
            if (source.Arguments is not null) foreach (var item in source.Arguments) _arguments.Add(item);
            if (source.TypeArguments is not null) foreach (var item in source.TypeArguments) _typeArguments.Add(item);
        }

        public FunctionCallBuilder()
        {
            _arguments = new System.Collections.Generic.List<string>();
            _typeArguments = new System.Collections.Generic.List<System.Type>();
            _name = string.Empty;
            SetDefaultValues();
        }

        public CrossCutting.Utilities.ExpressionEvaluator.FunctionCall Build()
        {
            return new CrossCutting.Utilities.ExpressionEvaluator.FunctionCall(Name, Arguments, TypeArguments);
        }

        partial void SetDefaultValues();

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionCallBuilder AddArguments(System.Collections.Generic.IEnumerable<string> arguments)
        {
            if (arguments is null) throw new System.ArgumentNullException(nameof(arguments));
            return AddArguments(arguments.ToArray());
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionCallBuilder AddArguments(params string[] arguments)
        {
            if (arguments is null) throw new System.ArgumentNullException(nameof(arguments));
            foreach (var item in arguments) Arguments.Add(item);
            return this;
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionCallBuilder AddTypeArguments(System.Collections.Generic.IEnumerable<System.Type> typeArguments)
        {
            if (typeArguments is null) throw new System.ArgumentNullException(nameof(typeArguments));
            return AddTypeArguments(typeArguments.ToArray());
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionCallBuilder AddTypeArguments(params System.Type[] typeArguments)
        {
            if (typeArguments is null) throw new System.ArgumentNullException(nameof(typeArguments));
            foreach (var item in typeArguments) TypeArguments.Add(item);
            return this;
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionCallBuilder WithName(string name)
        {
            if (name is null) throw new System.ArgumentNullException(nameof(name));
            Name = name;
            return this;
        }

        public static implicit operator CrossCutting.Utilities.ExpressionEvaluator.FunctionCall(FunctionCallBuilder entity)
        {
            return entity.Build();
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public partial class FunctionDescriptorArgumentBuilder : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;

        private System.Type _type;

        private string _description;

        private bool _isRequired;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_name!, value!);
                _name = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Name));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public System.Type Type
        {
            get
            {
                return _type;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Type>.Default.Equals(_type!, value!);
                _type = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Type));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_description!, value!);
                _description = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Description));
            }
        }

        public bool IsRequired
        {
            get
            {
                return _isRequired;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_isRequired, value);
                _isRequired = value;
                if (hasChanged) HandlePropertyChanged(nameof(IsRequired));
            }
        }

        public FunctionDescriptorArgumentBuilder(CrossCutting.Utilities.ExpressionEvaluator.FunctionDescriptorArgument source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _name = source.Name;
            _type = source.Type;
            _description = source.Description;
            _isRequired = source.IsRequired;
        }

        public FunctionDescriptorArgumentBuilder()
        {
            _name = string.Empty;
            _type = default(System.Type)!;
            _description = string.Empty;
            SetDefaultValues();
        }

        public CrossCutting.Utilities.ExpressionEvaluator.FunctionDescriptorArgument Build()
        {
            return new CrossCutting.Utilities.ExpressionEvaluator.FunctionDescriptorArgument(Name, Type, Description, IsRequired);
        }

        partial void SetDefaultValues();

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorArgumentBuilder WithName(string name)
        {
            if (name is null) throw new System.ArgumentNullException(nameof(name));
            Name = name;
            return this;
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorArgumentBuilder WithType(System.Type type)
        {
            if (type is null) throw new System.ArgumentNullException(nameof(type));
            Type = type;
            return this;
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorArgumentBuilder WithDescription(string description)
        {
            if (description is null) throw new System.ArgumentNullException(nameof(description));
            Description = description;
            return this;
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorArgumentBuilder WithIsRequired(bool isRequired = true)
        {
            IsRequired = isRequired;
            return this;
        }

        public static implicit operator CrossCutting.Utilities.ExpressionEvaluator.FunctionDescriptorArgument(FunctionDescriptorArgumentBuilder entity)
        {
            return entity.Build();
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public partial class FunctionDescriptorBuilder : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;

        private System.Type _functionType;

        private System.Type? _returnValueType;

        private string _description;

        private System.Collections.Generic.List<CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorArgumentBuilder> _arguments;

        private System.Collections.Generic.List<CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorTypeArgumentBuilder> _typeArguments;

        private System.Collections.Generic.List<CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorResultBuilder> _results;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_name!, value!);
                _name = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Name));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public System.Type FunctionType
        {
            get
            {
                return _functionType;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Type>.Default.Equals(_functionType!, value!);
                _functionType = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(FunctionType));
            }
        }

        public System.Type? ReturnValueType
        {
            get
            {
                return _returnValueType;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Type>.Default.Equals(_returnValueType!, value!);
                _returnValueType = value;
                if (hasChanged) HandlePropertyChanged(nameof(ReturnValueType));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_description!, value!);
                _description = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Description));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.Generic.List<CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorArgumentBuilder> Arguments
        {
            get
            {
                return _arguments;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorArgumentBuilder>>.Default.Equals(_arguments!, value!);
                _arguments = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Arguments));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.Generic.List<CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorTypeArgumentBuilder> TypeArguments
        {
            get
            {
                return _typeArguments;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorTypeArgumentBuilder>>.Default.Equals(_typeArguments!, value!);
                _typeArguments = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(TypeArguments));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.Generic.List<CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorResultBuilder> Results
        {
            get
            {
                return _results;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorResultBuilder>>.Default.Equals(_results!, value!);
                _results = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Results));
            }
        }

        public FunctionDescriptorBuilder(CrossCutting.Utilities.ExpressionEvaluator.FunctionDescriptor source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _arguments = new System.Collections.Generic.List<CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorArgumentBuilder>();
            _typeArguments = new System.Collections.Generic.List<CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorTypeArgumentBuilder>();
            _results = new System.Collections.Generic.List<CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorResultBuilder>();
            _name = source.Name;
            _functionType = source.FunctionType;
            _returnValueType = source.ReturnValueType;
            _description = source.Description;
            if (source.Arguments is not null) foreach (var item in source.Arguments.Select(x => x.ToBuilder())) _arguments.Add(item);
            if (source.TypeArguments is not null) foreach (var item in source.TypeArguments.Select(x => x.ToBuilder())) _typeArguments.Add(item);
            if (source.Results is not null) foreach (var item in source.Results.Select(x => x.ToBuilder())) _results.Add(item);
        }

        public FunctionDescriptorBuilder()
        {
            _arguments = new System.Collections.Generic.List<CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorArgumentBuilder>();
            _typeArguments = new System.Collections.Generic.List<CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorTypeArgumentBuilder>();
            _results = new System.Collections.Generic.List<CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorResultBuilder>();
            _name = string.Empty;
            _functionType = default(System.Type)!;
            _description = string.Empty;
            SetDefaultValues();
        }

        public CrossCutting.Utilities.ExpressionEvaluator.FunctionDescriptor Build()
        {
            return new CrossCutting.Utilities.ExpressionEvaluator.FunctionDescriptor(Name, FunctionType, ReturnValueType, Description, Arguments.Select(x => x.Build()!).ToList().AsReadOnly(), TypeArguments.Select(x => x.Build()!).ToList().AsReadOnly(), Results.Select(x => x.Build()!).ToList().AsReadOnly());
        }

        partial void SetDefaultValues();

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorBuilder AddArguments(System.Collections.Generic.IEnumerable<CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorArgumentBuilder> arguments)
        {
            if (arguments is null) throw new System.ArgumentNullException(nameof(arguments));
            return AddArguments(arguments.ToArray());
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorBuilder AddArguments(params CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorArgumentBuilder[] arguments)
        {
            if (arguments is null) throw new System.ArgumentNullException(nameof(arguments));
            foreach (var item in arguments) Arguments.Add(item);
            return this;
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorBuilder AddTypeArguments(System.Collections.Generic.IEnumerable<CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorTypeArgumentBuilder> typeArguments)
        {
            if (typeArguments is null) throw new System.ArgumentNullException(nameof(typeArguments));
            return AddTypeArguments(typeArguments.ToArray());
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorBuilder AddTypeArguments(params CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorTypeArgumentBuilder[] typeArguments)
        {
            if (typeArguments is null) throw new System.ArgumentNullException(nameof(typeArguments));
            foreach (var item in typeArguments) TypeArguments.Add(item);
            return this;
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorBuilder AddResults(System.Collections.Generic.IEnumerable<CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorResultBuilder> results)
        {
            if (results is null) throw new System.ArgumentNullException(nameof(results));
            return AddResults(results.ToArray());
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorBuilder AddResults(params CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorResultBuilder[] results)
        {
            if (results is null) throw new System.ArgumentNullException(nameof(results));
            foreach (var item in results) Results.Add(item);
            return this;
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorBuilder WithName(string name)
        {
            if (name is null) throw new System.ArgumentNullException(nameof(name));
            Name = name;
            return this;
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorBuilder WithFunctionType(System.Type functionType)
        {
            if (functionType is null) throw new System.ArgumentNullException(nameof(functionType));
            FunctionType = functionType;
            return this;
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorBuilder WithReturnValueType(System.Type? returnValueType)
        {
            ReturnValueType = returnValueType;
            return this;
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorBuilder WithDescription(string description)
        {
            if (description is null) throw new System.ArgumentNullException(nameof(description));
            Description = description;
            return this;
        }

        public static implicit operator CrossCutting.Utilities.ExpressionEvaluator.FunctionDescriptor(FunctionDescriptorBuilder entity)
        {
            return entity.Build();
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public partial class FunctionDescriptorResultBuilder : System.ComponentModel.INotifyPropertyChanged
    {
        private CrossCutting.Common.Results.ResultStatus _status;

        private string _value;

        private System.Type? _valueType;

        private string _description;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        public CrossCutting.Common.Results.ResultStatus Status
        {
            get
            {
                return _status;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<CrossCutting.Common.Results.ResultStatus>.Default.Equals(_status, value);
                _status = value;
                if (hasChanged) HandlePropertyChanged(nameof(Status));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_value!, value!);
                _value = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Value));
            }
        }

        public System.Type? ValueType
        {
            get
            {
                return _valueType;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Type>.Default.Equals(_valueType!, value!);
                _valueType = value;
                if (hasChanged) HandlePropertyChanged(nameof(ValueType));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_description!, value!);
                _description = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Description));
            }
        }

        public FunctionDescriptorResultBuilder(CrossCutting.Utilities.ExpressionEvaluator.FunctionDescriptorResult source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _status = source.Status;
            _value = source.Value;
            _valueType = source.ValueType;
            _description = source.Description;
        }

        public FunctionDescriptorResultBuilder()
        {
            _value = string.Empty;
            _description = string.Empty;
            SetDefaultValues();
        }

        public CrossCutting.Utilities.ExpressionEvaluator.FunctionDescriptorResult Build()
        {
            return new CrossCutting.Utilities.ExpressionEvaluator.FunctionDescriptorResult(Status, Value, ValueType, Description);
        }

        partial void SetDefaultValues();

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorResultBuilder WithStatus(CrossCutting.Common.Results.ResultStatus status)
        {
            Status = status;
            return this;
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorResultBuilder WithValue(string value)
        {
            if (value is null) throw new System.ArgumentNullException(nameof(value));
            Value = value;
            return this;
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorResultBuilder WithValueType(System.Type? valueType)
        {
            ValueType = valueType;
            return this;
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorResultBuilder WithDescription(string description)
        {
            if (description is null) throw new System.ArgumentNullException(nameof(description));
            Description = description;
            return this;
        }

        public static implicit operator CrossCutting.Utilities.ExpressionEvaluator.FunctionDescriptorResult(FunctionDescriptorResultBuilder entity)
        {
            return entity.Build();
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public partial class FunctionDescriptorTypeArgumentBuilder : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;

        private string _description;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_name!, value!);
                _name = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Name));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_description!, value!);
                _description = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Description));
            }
        }

        public FunctionDescriptorTypeArgumentBuilder(CrossCutting.Utilities.ExpressionEvaluator.FunctionDescriptorTypeArgument source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _name = source.Name;
            _description = source.Description;
        }

        public FunctionDescriptorTypeArgumentBuilder()
        {
            _name = string.Empty;
            _description = string.Empty;
            SetDefaultValues();
        }

        public CrossCutting.Utilities.ExpressionEvaluator.FunctionDescriptorTypeArgument Build()
        {
            return new CrossCutting.Utilities.ExpressionEvaluator.FunctionDescriptorTypeArgument(Name, Description);
        }

        partial void SetDefaultValues();

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorTypeArgumentBuilder WithName(string name)
        {
            if (name is null) throw new System.ArgumentNullException(nameof(name));
            Name = name;
            return this;
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorTypeArgumentBuilder WithDescription(string description)
        {
            if (description is null) throw new System.ArgumentNullException(nameof(description));
            Description = description;
            return this;
        }

        public static implicit operator CrossCutting.Utilities.ExpressionEvaluator.FunctionDescriptorTypeArgument(FunctionDescriptorTypeArgumentBuilder entity)
        {
            return entity.Build();
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
}
#nullable disable
