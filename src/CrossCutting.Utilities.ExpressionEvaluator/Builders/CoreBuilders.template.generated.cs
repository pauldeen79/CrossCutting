// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 9.0.3
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace CrossCutting.Utilities.ExpressionEvaluator.Builders
{
    public partial class ConditionBuilder : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Nullable<CrossCutting.Utilities.ExpressionEvaluator.Domains.Combination> _combination;

        private string _leftExpression;

        private string _operator;

        private string _rightExpression;

        private bool _startGroup;

        private bool _endGroup;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        public System.Nullable<CrossCutting.Utilities.ExpressionEvaluator.Domains.Combination> Combination
        {
            get
            {
                return _combination;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Nullable<CrossCutting.Utilities.ExpressionEvaluator.Domains.Combination>>.Default.Equals(_combination, value);
                _combination = value;
                if (hasChanged) HandlePropertyChanged(nameof(Combination));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string LeftExpression
        {
            get
            {
                return _leftExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_leftExpression!, value!);
                _leftExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(LeftExpression));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Operator
        {
            get
            {
                return _operator;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_operator!, value!);
                _operator = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Operator));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string RightExpression
        {
            get
            {
                return _rightExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_rightExpression!, value!);
                _rightExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(RightExpression));
            }
        }

        public bool StartGroup
        {
            get
            {
                return _startGroup;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_startGroup, value);
                _startGroup = value;
                if (hasChanged) HandlePropertyChanged(nameof(StartGroup));
            }
        }

        public bool EndGroup
        {
            get
            {
                return _endGroup;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_endGroup, value);
                _endGroup = value;
                if (hasChanged) HandlePropertyChanged(nameof(EndGroup));
            }
        }

        public ConditionBuilder(CrossCutting.Utilities.ExpressionEvaluator.Condition source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _combination = source.Combination;
            _leftExpression = source.LeftExpression;
            _operator = source.Operator;
            _rightExpression = source.RightExpression;
            _startGroup = source.StartGroup;
            _endGroup = source.EndGroup;
        }

        public ConditionBuilder()
        {
            _leftExpression = string.Empty;
            _operator = string.Empty;
            _rightExpression = string.Empty;
            SetDefaultValues();
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Condition Build()
        {
            return new CrossCutting.Utilities.ExpressionEvaluator.Condition(Combination, LeftExpression, Operator, RightExpression, StartGroup, EndGroup);
        }

        partial void SetDefaultValues();

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.ConditionBuilder WithCombination(System.Nullable<CrossCutting.Utilities.ExpressionEvaluator.Domains.Combination> combination)
        {
            Combination = combination;
            return this;
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.ConditionBuilder WithLeftExpression(string leftExpression)
        {
            if (leftExpression is null) throw new System.ArgumentNullException(nameof(leftExpression));
            LeftExpression = leftExpression;
            return this;
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.ConditionBuilder WithOperator(string @operator)
        {
            if (@operator is null) throw new System.ArgumentNullException(nameof(@operator));
            Operator = @operator;
            return this;
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.ConditionBuilder WithRightExpression(string rightExpression)
        {
            if (rightExpression is null) throw new System.ArgumentNullException(nameof(rightExpression));
            RightExpression = rightExpression;
            return this;
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.ConditionBuilder WithStartGroup(bool startGroup = true)
        {
            StartGroup = startGroup;
            return this;
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.ConditionBuilder WithEndGroup(bool endGroup = true)
        {
            EndGroup = endGroup;
            return this;
        }

        public static implicit operator CrossCutting.Utilities.ExpressionEvaluator.Condition(ConditionBuilder entity)
        {
            return entity.Build();
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public partial class ExpressionEvaluatorSettingsBuilder : System.ComponentModel.INotifyPropertyChanged
    {
        private System.IFormatProvider _formatProvider;

        private System.StringComparison _stringComparison;

        private int _maximumRecursion;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        public System.IFormatProvider FormatProvider
        {
            get
            {
                return _formatProvider;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.IFormatProvider>.Default.Equals(_formatProvider!, value!);
                _formatProvider = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(FormatProvider));
            }
        }

        public System.StringComparison StringComparison
        {
            get
            {
                return _stringComparison;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.StringComparison>.Default.Equals(_stringComparison, value);
                _stringComparison = value;
                if (hasChanged) HandlePropertyChanged(nameof(StringComparison));
            }
        }

        [System.ComponentModel.DefaultValueAttribute(10)]
        public int MaximumRecursion
        {
            get
            {
                return _maximumRecursion;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Int32>.Default.Equals(_maximumRecursion, value);
                _maximumRecursion = value;
                if (hasChanged) HandlePropertyChanged(nameof(MaximumRecursion));
            }
        }

        public ExpressionEvaluatorSettingsBuilder(CrossCutting.Utilities.ExpressionEvaluator.ExpressionEvaluatorSettings source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _formatProvider = source.FormatProvider;
            _stringComparison = source.StringComparison;
            _maximumRecursion = source.MaximumRecursion;
        }

        public ExpressionEvaluatorSettingsBuilder()
        {
            _formatProvider = System.Globalization.CultureInfo.InvariantCulture!;
            _maximumRecursion = 10;
            SetDefaultValues();
        }

        public CrossCutting.Utilities.ExpressionEvaluator.ExpressionEvaluatorSettings Build()
        {
            return new CrossCutting.Utilities.ExpressionEvaluator.ExpressionEvaluatorSettings(FormatProvider, StringComparison, MaximumRecursion);
        }

        partial void SetDefaultValues();

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.ExpressionEvaluatorSettingsBuilder WithFormatProvider(System.IFormatProvider formatProvider)
        {
            if (formatProvider is null) throw new System.ArgumentNullException(nameof(formatProvider));
            FormatProvider = formatProvider;
            return this;
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.ExpressionEvaluatorSettingsBuilder WithStringComparison(System.StringComparison stringComparison)
        {
            StringComparison = stringComparison;
            return this;
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.ExpressionEvaluatorSettingsBuilder WithMaximumRecursion(int maximumRecursion)
        {
            MaximumRecursion = maximumRecursion;
            return this;
        }

        public static implicit operator CrossCutting.Utilities.ExpressionEvaluator.ExpressionEvaluatorSettings(ExpressionEvaluatorSettingsBuilder entity)
        {
            return entity.Build();
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public partial class FunctionCallBuilder : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;

        private System.Collections.Generic.List<string> _arguments;

        private System.Collections.Generic.List<string> _typeArguments;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_name!, value!);
                _name = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Name));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.Generic.List<string> Arguments
        {
            get
            {
                return _arguments;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.List<System.String>>.Default.Equals(_arguments!, value!);
                _arguments = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Arguments));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public System.Collections.Generic.List<string> TypeArguments
        {
            get
            {
                return _typeArguments;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.List<System.String>>.Default.Equals(_typeArguments!, value!);
                _typeArguments = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(TypeArguments));
            }
        }

        public FunctionCallBuilder(CrossCutting.Utilities.ExpressionEvaluator.FunctionCall source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _arguments = new System.Collections.Generic.List<string>();
            _typeArguments = new System.Collections.Generic.List<string>();
            _name = source.Name;
            if (source.Arguments is not null) foreach (var item in source.Arguments) _arguments.Add(item);
            if (source.TypeArguments is not null) foreach (var item in source.TypeArguments) _typeArguments.Add(item);
        }

        public FunctionCallBuilder()
        {
            _arguments = new System.Collections.Generic.List<string>();
            _typeArguments = new System.Collections.Generic.List<string>();
            _name = string.Empty;
            SetDefaultValues();
        }

        public CrossCutting.Utilities.ExpressionEvaluator.FunctionCall Build()
        {
            return new CrossCutting.Utilities.ExpressionEvaluator.FunctionCall(Name, Arguments, TypeArguments);
        }

        partial void SetDefaultValues();

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionCallBuilder AddArguments(System.Collections.Generic.IEnumerable<string> arguments)
        {
            if (arguments is null) throw new System.ArgumentNullException(nameof(arguments));
            return AddArguments(arguments.ToArray());
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionCallBuilder AddArguments(params string[] arguments)
        {
            if (arguments is null) throw new System.ArgumentNullException(nameof(arguments));
            foreach (var item in arguments) Arguments.Add(item);
            return this;
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionCallBuilder AddTypeArguments(System.Collections.Generic.IEnumerable<string> typeArguments)
        {
            if (typeArguments is null) throw new System.ArgumentNullException(nameof(typeArguments));
            return AddTypeArguments(typeArguments.ToArray());
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionCallBuilder AddTypeArguments(params string[] typeArguments)
        {
            if (typeArguments is null) throw new System.ArgumentNullException(nameof(typeArguments));
            foreach (var item in typeArguments) TypeArguments.Add(item);
            return this;
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionCallBuilder WithName(string name)
        {
            if (name is null) throw new System.ArgumentNullException(nameof(name));
            Name = name;
            return this;
        }

        public static implicit operator CrossCutting.Utilities.ExpressionEvaluator.FunctionCall(FunctionCallBuilder entity)
        {
            return entity.Build();
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public partial class FunctionDescriptorArgumentBuilder : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;

        private System.Type _type;

        private string _description;

        private bool _isRequired;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_name!, value!);
                _name = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Name));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public System.Type Type
        {
            get
            {
                return _type;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Type>.Default.Equals(_type!, value!);
                _type = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Type));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_description!, value!);
                _description = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Description));
            }
        }

        public bool IsRequired
        {
            get
            {
                return _isRequired;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_isRequired, value);
                _isRequired = value;
                if (hasChanged) HandlePropertyChanged(nameof(IsRequired));
            }
        }

        public FunctionDescriptorArgumentBuilder(CrossCutting.Utilities.ExpressionEvaluator.FunctionDescriptorArgument source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _name = source.Name;
            _type = source.Type;
            _description = source.Description;
            _isRequired = source.IsRequired;
        }

        public FunctionDescriptorArgumentBuilder()
        {
            _name = string.Empty;
            _type = default(System.Type)!;
            _description = string.Empty;
            SetDefaultValues();
        }

        public CrossCutting.Utilities.ExpressionEvaluator.FunctionDescriptorArgument Build()
        {
            return new CrossCutting.Utilities.ExpressionEvaluator.FunctionDescriptorArgument(Name, Type, Description, IsRequired);
        }

        partial void SetDefaultValues();

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorArgumentBuilder WithName(string name)
        {
            if (name is null) throw new System.ArgumentNullException(nameof(name));
            Name = name;
            return this;
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorArgumentBuilder WithType(System.Type type)
        {
            if (type is null) throw new System.ArgumentNullException(nameof(type));
            Type = type;
            return this;
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorArgumentBuilder WithDescription(string description)
        {
            if (description is null) throw new System.ArgumentNullException(nameof(description));
            Description = description;
            return this;
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorArgumentBuilder WithIsRequired(bool isRequired = true)
        {
            IsRequired = isRequired;
            return this;
        }

        public static implicit operator CrossCutting.Utilities.ExpressionEvaluator.FunctionDescriptorArgument(FunctionDescriptorArgumentBuilder entity)
        {
            return entity.Build();
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public partial class FunctionDescriptorBuilder : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;

        private System.Type _functionType;

        private System.Type? _returnValueType;

        private string _description;

        private System.Collections.Generic.List<CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorArgumentBuilder> _arguments;

        private System.Collections.Generic.List<CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorTypeArgumentBuilder> _typeArguments;

        private System.Collections.Generic.List<CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorResultBuilder> _results;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_name!, value!);
                _name = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Name));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public System.Type FunctionType
        {
            get
            {
                return _functionType;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Type>.Default.Equals(_functionType!, value!);
                _functionType = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(FunctionType));
            }
        }

        public System.Type? ReturnValueType
        {
            get
            {
                return _returnValueType;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Type>.Default.Equals(_returnValueType!, value!);
                _returnValueType = value;
                if (hasChanged) HandlePropertyChanged(nameof(ReturnValueType));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_description!, value!);
                _description = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Description));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.Generic.List<CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorArgumentBuilder> Arguments
        {
            get
            {
                return _arguments;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorArgumentBuilder>>.Default.Equals(_arguments!, value!);
                _arguments = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Arguments));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.Generic.List<CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorTypeArgumentBuilder> TypeArguments
        {
            get
            {
                return _typeArguments;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorTypeArgumentBuilder>>.Default.Equals(_typeArguments!, value!);
                _typeArguments = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(TypeArguments));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.Generic.List<CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorResultBuilder> Results
        {
            get
            {
                return _results;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorResultBuilder>>.Default.Equals(_results!, value!);
                _results = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Results));
            }
        }

        public FunctionDescriptorBuilder(CrossCutting.Utilities.ExpressionEvaluator.FunctionDescriptor source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _arguments = new System.Collections.Generic.List<CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorArgumentBuilder>();
            _typeArguments = new System.Collections.Generic.List<CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorTypeArgumentBuilder>();
            _results = new System.Collections.Generic.List<CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorResultBuilder>();
            _name = source.Name;
            _functionType = source.FunctionType;
            _returnValueType = source.ReturnValueType;
            _description = source.Description;
            if (source.Arguments is not null) foreach (var item in source.Arguments.Select(x => x.ToBuilder())) _arguments.Add(item);
            if (source.TypeArguments is not null) foreach (var item in source.TypeArguments.Select(x => x.ToBuilder())) _typeArguments.Add(item);
            if (source.Results is not null) foreach (var item in source.Results.Select(x => x.ToBuilder())) _results.Add(item);
        }

        public FunctionDescriptorBuilder()
        {
            _arguments = new System.Collections.Generic.List<CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorArgumentBuilder>();
            _typeArguments = new System.Collections.Generic.List<CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorTypeArgumentBuilder>();
            _results = new System.Collections.Generic.List<CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorResultBuilder>();
            _name = string.Empty;
            _functionType = default(System.Type)!;
            _description = string.Empty;
            SetDefaultValues();
        }

        public CrossCutting.Utilities.ExpressionEvaluator.FunctionDescriptor Build()
        {
            return new CrossCutting.Utilities.ExpressionEvaluator.FunctionDescriptor(Name, FunctionType, ReturnValueType, Description, Arguments.Select(x => x.Build()!).ToList().AsReadOnly(), TypeArguments.Select(x => x.Build()!).ToList().AsReadOnly(), Results.Select(x => x.Build()!).ToList().AsReadOnly());
        }

        partial void SetDefaultValues();

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorBuilder AddArguments(System.Collections.Generic.IEnumerable<CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorArgumentBuilder> arguments)
        {
            if (arguments is null) throw new System.ArgumentNullException(nameof(arguments));
            return AddArguments(arguments.ToArray());
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorBuilder AddArguments(params CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorArgumentBuilder[] arguments)
        {
            if (arguments is null) throw new System.ArgumentNullException(nameof(arguments));
            foreach (var item in arguments) Arguments.Add(item);
            return this;
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorBuilder AddTypeArguments(System.Collections.Generic.IEnumerable<CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorTypeArgumentBuilder> typeArguments)
        {
            if (typeArguments is null) throw new System.ArgumentNullException(nameof(typeArguments));
            return AddTypeArguments(typeArguments.ToArray());
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorBuilder AddTypeArguments(params CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorTypeArgumentBuilder[] typeArguments)
        {
            if (typeArguments is null) throw new System.ArgumentNullException(nameof(typeArguments));
            foreach (var item in typeArguments) TypeArguments.Add(item);
            return this;
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorBuilder AddResults(System.Collections.Generic.IEnumerable<CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorResultBuilder> results)
        {
            if (results is null) throw new System.ArgumentNullException(nameof(results));
            return AddResults(results.ToArray());
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorBuilder AddResults(params CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorResultBuilder[] results)
        {
            if (results is null) throw new System.ArgumentNullException(nameof(results));
            foreach (var item in results) Results.Add(item);
            return this;
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorBuilder WithName(string name)
        {
            if (name is null) throw new System.ArgumentNullException(nameof(name));
            Name = name;
            return this;
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorBuilder WithFunctionType(System.Type functionType)
        {
            if (functionType is null) throw new System.ArgumentNullException(nameof(functionType));
            FunctionType = functionType;
            return this;
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorBuilder WithReturnValueType(System.Type? returnValueType)
        {
            ReturnValueType = returnValueType;
            return this;
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorBuilder WithDescription(string description)
        {
            if (description is null) throw new System.ArgumentNullException(nameof(description));
            Description = description;
            return this;
        }

        public static implicit operator CrossCutting.Utilities.ExpressionEvaluator.FunctionDescriptor(FunctionDescriptorBuilder entity)
        {
            return entity.Build();
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public partial class FunctionDescriptorResultBuilder : System.ComponentModel.INotifyPropertyChanged
    {
        private CrossCutting.Common.Results.ResultStatus _status;

        private string _value;

        private System.Type? _valueType;

        private string _description;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        public CrossCutting.Common.Results.ResultStatus Status
        {
            get
            {
                return _status;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<CrossCutting.Common.Results.ResultStatus>.Default.Equals(_status, value);
                _status = value;
                if (hasChanged) HandlePropertyChanged(nameof(Status));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_value!, value!);
                _value = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Value));
            }
        }

        public System.Type? ValueType
        {
            get
            {
                return _valueType;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Type>.Default.Equals(_valueType!, value!);
                _valueType = value;
                if (hasChanged) HandlePropertyChanged(nameof(ValueType));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_description!, value!);
                _description = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Description));
            }
        }

        public FunctionDescriptorResultBuilder(CrossCutting.Utilities.ExpressionEvaluator.FunctionDescriptorResult source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _status = source.Status;
            _value = source.Value;
            _valueType = source.ValueType;
            _description = source.Description;
        }

        public FunctionDescriptorResultBuilder()
        {
            _value = string.Empty;
            _description = string.Empty;
            SetDefaultValues();
        }

        public CrossCutting.Utilities.ExpressionEvaluator.FunctionDescriptorResult Build()
        {
            return new CrossCutting.Utilities.ExpressionEvaluator.FunctionDescriptorResult(Status, Value, ValueType, Description);
        }

        partial void SetDefaultValues();

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorResultBuilder WithStatus(CrossCutting.Common.Results.ResultStatus status)
        {
            Status = status;
            return this;
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorResultBuilder WithValue(string value)
        {
            if (value is null) throw new System.ArgumentNullException(nameof(value));
            Value = value;
            return this;
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorResultBuilder WithValueType(System.Type? valueType)
        {
            ValueType = valueType;
            return this;
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorResultBuilder WithDescription(string description)
        {
            if (description is null) throw new System.ArgumentNullException(nameof(description));
            Description = description;
            return this;
        }

        public static implicit operator CrossCutting.Utilities.ExpressionEvaluator.FunctionDescriptorResult(FunctionDescriptorResultBuilder entity)
        {
            return entity.Build();
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public partial class FunctionDescriptorTypeArgumentBuilder : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;

        private string _description;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_name!, value!);
                _name = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Name));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_description!, value!);
                _description = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Description));
            }
        }

        public FunctionDescriptorTypeArgumentBuilder(CrossCutting.Utilities.ExpressionEvaluator.FunctionDescriptorTypeArgument source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _name = source.Name;
            _description = source.Description;
        }

        public FunctionDescriptorTypeArgumentBuilder()
        {
            _name = string.Empty;
            _description = string.Empty;
            SetDefaultValues();
        }

        public CrossCutting.Utilities.ExpressionEvaluator.FunctionDescriptorTypeArgument Build()
        {
            return new CrossCutting.Utilities.ExpressionEvaluator.FunctionDescriptorTypeArgument(Name, Description);
        }

        partial void SetDefaultValues();

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorTypeArgumentBuilder WithName(string name)
        {
            if (name is null) throw new System.ArgumentNullException(nameof(name));
            Name = name;
            return this;
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionDescriptorTypeArgumentBuilder WithDescription(string description)
        {
            if (description is null) throw new System.ArgumentNullException(nameof(description));
            Description = description;
            return this;
        }

        public static implicit operator CrossCutting.Utilities.ExpressionEvaluator.FunctionDescriptorTypeArgument(FunctionDescriptorTypeArgumentBuilder entity)
        {
            return entity.Build();
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public partial class OperatorContextBuilder : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.Generic.Dictionary<string,CrossCutting.Common.Results.Result> _results;

        private System.StringComparison _stringComparison;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public System.Collections.Generic.Dictionary<string,CrossCutting.Common.Results.Result> Results
        {
            get
            {
                return _results;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.Dictionary<System.String,CrossCutting.Common.Results.Result>>.Default.Equals(_results!, value!);
                _results = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Results));
            }
        }

        public System.StringComparison StringComparison
        {
            get
            {
                return _stringComparison;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.StringComparison>.Default.Equals(_stringComparison, value);
                _stringComparison = value;
                if (hasChanged) HandlePropertyChanged(nameof(StringComparison));
            }
        }

        public OperatorContextBuilder(CrossCutting.Utilities.ExpressionEvaluator.OperatorContext source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _results = source.Results;
            _stringComparison = source.StringComparison;
        }

        public OperatorContextBuilder()
        {
            _results = default(System.Collections.Generic.Dictionary<System.String,CrossCutting.Common.Results.Result>)!;
            SetDefaultValues();
        }

        public CrossCutting.Utilities.ExpressionEvaluator.OperatorContext Build()
        {
            return new CrossCutting.Utilities.ExpressionEvaluator.OperatorContext(Results, StringComparison);
        }

        partial void SetDefaultValues();

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.OperatorContextBuilder WithResults(System.Collections.Generic.Dictionary<string,CrossCutting.Common.Results.Result> results)
        {
            if (results is null) throw new System.ArgumentNullException(nameof(results));
            Results = results;
            return this;
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.OperatorContextBuilder WithStringComparison(System.StringComparison stringComparison)
        {
            StringComparison = stringComparison;
            return this;
        }

        public static implicit operator CrossCutting.Utilities.ExpressionEvaluator.OperatorContext(OperatorContextBuilder entity)
        {
            return entity.Build();
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
}
#nullable disable
