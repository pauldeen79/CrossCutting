// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 9.0.8
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace CrossCutting.Utilities.ExpressionEvaluator.Builders.Extensions
{
    public static partial class ParseResultBuilderExtensions
    {
        public static T AddValidationErrors<T>(this T instance, System.Collections.Generic.IEnumerable<CrossCutting.Common.Results.ValidationError> validationErrors)
            where T : CrossCutting.Utilities.ExpressionEvaluator.Builders.Abstractions.IParseResultBuilder
        {
            if (validationErrors is null) throw new System.ArgumentNullException(nameof(validationErrors));
            return instance.AddValidationErrors<T>(validationErrors.ToArray());
        }

        public static T AddValidationErrors<T>(this T instance, params CrossCutting.Common.Results.ValidationError[] validationErrors)
            where T : CrossCutting.Utilities.ExpressionEvaluator.Builders.Abstractions.IParseResultBuilder
        {
            if (validationErrors is null) throw new System.ArgumentNullException(nameof(validationErrors));
            foreach (var item in validationErrors) instance.ValidationErrors.Add(item);
            return instance;
        }

        public static T WithStatus<T>(this T instance, CrossCutting.Common.Results.ResultStatus status)
            where T : CrossCutting.Utilities.ExpressionEvaluator.Builders.Abstractions.IParseResultBuilder
        {
            instance.Status = status;
            return instance;
        }

        public static T WithErrorMessage<T>(this T instance, string? errorMessage)
            where T : CrossCutting.Utilities.ExpressionEvaluator.Builders.Abstractions.IParseResultBuilder
        {
            instance.ErrorMessage = errorMessage;
            return instance;
        }

        public static T WithException<T>(this T instance, System.Exception? exception)
            where T : CrossCutting.Utilities.ExpressionEvaluator.Builders.Abstractions.IParseResultBuilder
        {
            instance.Exception = exception;
            return instance;
        }

        public static T WithSourceExpression<T>(this T instance, string sourceExpression)
            where T : CrossCutting.Utilities.ExpressionEvaluator.Builders.Abstractions.IParseResultBuilder
        {
            if (sourceExpression is null) throw new System.ArgumentNullException(nameof(sourceExpression));
            instance.SourceExpression = sourceExpression;
            return instance;
        }

        public static T WithExpressionComponentType<T>(this T instance, System.Type? expressionComponentType)
            where T : CrossCutting.Utilities.ExpressionEvaluator.Builders.Abstractions.IParseResultBuilder
        {
            instance.ExpressionComponentType = expressionComponentType;
            return instance;
        }

        public static T WithResultType<T>(this T instance, System.Type? resultType)
            where T : CrossCutting.Utilities.ExpressionEvaluator.Builders.Abstractions.IParseResultBuilder
        {
            instance.ResultType = resultType;
            return instance;
        }
    }
}
#nullable disable
