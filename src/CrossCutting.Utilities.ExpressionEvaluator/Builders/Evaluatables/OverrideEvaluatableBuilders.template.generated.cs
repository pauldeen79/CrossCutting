// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 9.0.9
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace CrossCutting.Utilities.ExpressionEvaluator.Builders.Evaluatables
{
    public partial class ContextEvaluatableBuilder : EvaluatableBaseBuilder<ContextEvaluatableBuilder, CrossCutting.Utilities.ExpressionEvaluator.Evaluatables.ContextEvaluatable>, CrossCutting.Utilities.ExpressionEvaluator.Builders.Abstractions.IEvaluatableBuilder
    {
        public ContextEvaluatableBuilder(CrossCutting.Utilities.ExpressionEvaluator.Evaluatables.ContextEvaluatable source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public ContextEvaluatableBuilder() : base()
        {
            SetDefaultValues();
        }

        public override CrossCutting.Utilities.ExpressionEvaluator.Evaluatables.ContextEvaluatable BuildTyped()
        {
            return new CrossCutting.Utilities.ExpressionEvaluator.Evaluatables.ContextEvaluatable();
        }

        partial void SetDefaultValues();

        public static implicit operator CrossCutting.Utilities.ExpressionEvaluator.Evaluatables.ContextEvaluatable(ContextEvaluatableBuilder builder)
        {
            return builder.BuildTyped();
        }
    }
    public partial class DelegateEvaluatableBuilder : EvaluatableBaseBuilder<DelegateEvaluatableBuilder, CrossCutting.Utilities.ExpressionEvaluator.Evaluatables.DelegateEvaluatable>, CrossCutting.Utilities.ExpressionEvaluator.Builders.Abstractions.IEvaluatableBuilder
    {
        private System.Func<object?> _value;

        public System.Func<object?> Value
        {
            get
            {
                return _value;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Func<System.Object?>>.Default.Equals(_value!, value!);
                _value = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Value));
            }
        }

        public DelegateEvaluatableBuilder(CrossCutting.Utilities.ExpressionEvaluator.Evaluatables.DelegateEvaluatable source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _value = source.Value;
        }

        public DelegateEvaluatableBuilder() : base()
        {
            _value = default(System.Func<System.Object?>)!;
            SetDefaultValues();
        }

        public override CrossCutting.Utilities.ExpressionEvaluator.Evaluatables.DelegateEvaluatable BuildTyped()
        {
            return new CrossCutting.Utilities.ExpressionEvaluator.Evaluatables.DelegateEvaluatable(Value);
        }

        partial void SetDefaultValues();

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.Evaluatables.DelegateEvaluatableBuilder WithValue(System.Func<object?> value)
        {
            if (value is null) throw new System.ArgumentNullException(nameof(value));
            Value = value;
            return this;
        }

        public static implicit operator CrossCutting.Utilities.ExpressionEvaluator.Evaluatables.DelegateEvaluatable(DelegateEvaluatableBuilder builder)
        {
            return builder.BuildTyped();
        }
    }
    public partial class EmptyEvaluatableBuilder : EvaluatableBaseBuilder<EmptyEvaluatableBuilder, CrossCutting.Utilities.ExpressionEvaluator.Evaluatables.EmptyEvaluatable>, CrossCutting.Utilities.ExpressionEvaluator.Builders.Abstractions.IEvaluatableBuilder
    {
        public EmptyEvaluatableBuilder(CrossCutting.Utilities.ExpressionEvaluator.Evaluatables.EmptyEvaluatable source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public EmptyEvaluatableBuilder() : base()
        {
            SetDefaultValues();
        }

        public override CrossCutting.Utilities.ExpressionEvaluator.Evaluatables.EmptyEvaluatable BuildTyped()
        {
            return new CrossCutting.Utilities.ExpressionEvaluator.Evaluatables.EmptyEvaluatable();
        }

        partial void SetDefaultValues();

        public static implicit operator CrossCutting.Utilities.ExpressionEvaluator.Evaluatables.EmptyEvaluatable(EmptyEvaluatableBuilder builder)
        {
            return builder.BuildTyped();
        }
    }
    public partial class LiteralEvaluatableBuilder : EvaluatableBaseBuilder<LiteralEvaluatableBuilder, CrossCutting.Utilities.ExpressionEvaluator.Evaluatables.LiteralEvaluatable>, CrossCutting.Utilities.ExpressionEvaluator.Builders.Abstractions.IEvaluatableBuilder
    {
        private object? _value;

        public object? Value
        {
            get
            {
                return _value;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Object>.Default.Equals(_value!, value!);
                _value = value;
                if (hasChanged) HandlePropertyChanged(nameof(Value));
            }
        }

        public LiteralEvaluatableBuilder(CrossCutting.Utilities.ExpressionEvaluator.Evaluatables.LiteralEvaluatable source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _value = source.Value;
        }

        public LiteralEvaluatableBuilder() : base()
        {
            SetDefaultValues();
        }

        public override CrossCutting.Utilities.ExpressionEvaluator.Evaluatables.LiteralEvaluatable BuildTyped()
        {
            return new CrossCutting.Utilities.ExpressionEvaluator.Evaluatables.LiteralEvaluatable(Value);
        }

        partial void SetDefaultValues();

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.Evaluatables.LiteralEvaluatableBuilder WithValue(object? value)
        {
            Value = value;
            return this;
        }

        public static implicit operator CrossCutting.Utilities.ExpressionEvaluator.Evaluatables.LiteralEvaluatable(LiteralEvaluatableBuilder builder)
        {
            return builder.BuildTyped();
        }
    }
}
#nullable disable
