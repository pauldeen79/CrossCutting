// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 9.0.9
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace CrossCutting.Utilities.ExpressionEvaluator.Expressions
{
    public partial record ContextExpression : CrossCutting.Utilities.ExpressionEvaluator.ExpressionBase, CrossCutting.Utilities.ExpressionEvaluator.Abstractions.IExpression
    {
        public ContextExpression() : base()
        {
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public static implicit operator CrossCutting.Utilities.ExpressionEvaluator.Builders.Expressions.ContextExpressionBuilder(CrossCutting.Utilities.ExpressionEvaluator.Expressions.ContextExpression entity)
        {
            return entity.ToTypedBuilder();
        }

        public override CrossCutting.Utilities.ExpressionEvaluator.Builders.ExpressionBaseBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.Expressions.ContextExpressionBuilder ToTypedBuilder()
        {
            return new CrossCutting.Utilities.ExpressionEvaluator.Builders.Expressions.ContextExpressionBuilder(this);
        }
    }
    public partial record DelegateExpression : CrossCutting.Utilities.ExpressionEvaluator.ExpressionBase, CrossCutting.Utilities.ExpressionEvaluator.Abstractions.IExpression
    {
        public System.Func<object?> Value
        {
            get;
        }

        public DelegateExpression(System.Func<object?> value) : base()
        {
            this.Value = value;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public static implicit operator CrossCutting.Utilities.ExpressionEvaluator.Builders.Expressions.DelegateExpressionBuilder(CrossCutting.Utilities.ExpressionEvaluator.Expressions.DelegateExpression entity)
        {
            return entity.ToTypedBuilder();
        }

        public override CrossCutting.Utilities.ExpressionEvaluator.Builders.ExpressionBaseBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.Expressions.DelegateExpressionBuilder ToTypedBuilder()
        {
            return new CrossCutting.Utilities.ExpressionEvaluator.Builders.Expressions.DelegateExpressionBuilder(this);
        }
    }
    public partial record EmptyExpression : CrossCutting.Utilities.ExpressionEvaluator.ExpressionBase, CrossCutting.Utilities.ExpressionEvaluator.Abstractions.IExpression
    {
        public EmptyExpression() : base()
        {
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public static implicit operator CrossCutting.Utilities.ExpressionEvaluator.Builders.Expressions.EmptyExpressionBuilder(CrossCutting.Utilities.ExpressionEvaluator.Expressions.EmptyExpression entity)
        {
            return entity.ToTypedBuilder();
        }

        public override CrossCutting.Utilities.ExpressionEvaluator.Builders.ExpressionBaseBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.Expressions.EmptyExpressionBuilder ToTypedBuilder()
        {
            return new CrossCutting.Utilities.ExpressionEvaluator.Builders.Expressions.EmptyExpressionBuilder(this);
        }
    }
    public partial record LiteralExpression : CrossCutting.Utilities.ExpressionEvaluator.ExpressionBase, CrossCutting.Utilities.ExpressionEvaluator.Abstractions.IExpression
    {
        public object? Value
        {
            get;
        }

        public LiteralExpression(object? value) : base()
        {
            this.Value = value;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public static implicit operator CrossCutting.Utilities.ExpressionEvaluator.Builders.Expressions.LiteralExpressionBuilder(CrossCutting.Utilities.ExpressionEvaluator.Expressions.LiteralExpression entity)
        {
            return entity.ToTypedBuilder();
        }

        public override CrossCutting.Utilities.ExpressionEvaluator.Builders.ExpressionBaseBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.Expressions.LiteralExpressionBuilder ToTypedBuilder()
        {
            return new CrossCutting.Utilities.ExpressionEvaluator.Builders.Expressions.LiteralExpressionBuilder(this);
        }
    }
}
#nullable disable
