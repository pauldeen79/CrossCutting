// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 9.0.5
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace CrossCutting.Utilities.ExpressionEvaluator
{
    public partial record ExpressionEvaluatorSettings
    {
        public System.IFormatProvider FormatProvider
        {
            get;
        }

        public System.StringComparison StringComparison
        {
            get;
        }

        [System.ComponentModel.DefaultValueAttribute(10)]
        public int MaximumRecursion
        {
            get;
        }

        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool EscapeBraces
        {
            get;
        }

        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool ValidateArgumentTypes
        {
            get;
        }

        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool StrictTypeChecking
        {
            get;
        }

        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool AllowReflection
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [System.ComponentModel.DefaultValueAttribute(@"{")]
        public string PlaceholderStart
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [System.ComponentModel.DefaultValueAttribute(@"}")]
        public string PlaceholderEnd
        {
            get;
        }

        public ExpressionEvaluatorSettings(System.IFormatProvider formatProvider, System.StringComparison stringComparison, int maximumRecursion, bool escapeBraces, bool validateArgumentTypes, bool strictTypeChecking, bool allowReflection, string placeholderStart, string placeholderEnd)
        {
            this.FormatProvider = formatProvider;
            this.StringComparison = stringComparison;
            this.MaximumRecursion = maximumRecursion;
            this.EscapeBraces = escapeBraces;
            this.ValidateArgumentTypes = validateArgumentTypes;
            this.StrictTypeChecking = strictTypeChecking;
            this.AllowReflection = allowReflection;
            this.PlaceholderStart = placeholderStart;
            this.PlaceholderEnd = placeholderEnd;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.ExpressionEvaluatorSettingsBuilder ToBuilder()
        {
            return new CrossCutting.Utilities.ExpressionEvaluator.Builders.ExpressionEvaluatorSettingsBuilder(this);
        }
    }
    public partial record ExpressionParsePartResult : CrossCutting.Utilities.ExpressionEvaluator.Abstractions.IParseResult
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string PartName
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.Generic.IReadOnlyCollection<CrossCutting.Utilities.ExpressionEvaluator.ExpressionParsePartResult> PartResults
        {
            get;
        }

        public CrossCutting.Common.Results.ResultStatus Status
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public System.Collections.Generic.IReadOnlyCollection<CrossCutting.Common.Results.ValidationError> ValidationErrors
        {
            get;
        }

        public string? ErrorMessage
        {
            get;
        }

        public System.Exception? Exception
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string SourceExpression
        {
            get;
        }

        public System.Type? ExpressionComponentType
        {
            get;
        }

        public System.Type? ResultType
        {
            get;
        }

        public ExpressionParsePartResult(string partName, System.Collections.Generic.IEnumerable<CrossCutting.Utilities.ExpressionEvaluator.ExpressionParsePartResult> partResults, CrossCutting.Common.Results.ResultStatus status, System.Collections.Generic.IEnumerable<CrossCutting.Common.Results.ValidationError> validationErrors, string? errorMessage, System.Exception? exception, string sourceExpression, System.Type? expressionComponentType, System.Type? resultType)
        {
            this.PartName = partName;
            this.PartResults = partResults is null ? null! : new CrossCutting.Common.ReadOnlyValueCollection<CrossCutting.Utilities.ExpressionEvaluator.ExpressionParsePartResult>(partResults);
            this.Status = status;
            this.ValidationErrors = validationErrors is null ? null! : new CrossCutting.Common.ReadOnlyValueCollection<CrossCutting.Common.Results.ValidationError>(validationErrors);
            this.ErrorMessage = errorMessage;
            this.Exception = exception;
            this.SourceExpression = sourceExpression;
            this.ExpressionComponentType = expressionComponentType;
            this.ResultType = resultType;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.ExpressionParsePartResultBuilder ToBuilder()
        {
            return new CrossCutting.Utilities.ExpressionEvaluator.Builders.ExpressionParsePartResultBuilder(this);
        }
    }
    public partial record ExpressionParseResult : CrossCutting.Utilities.ExpressionEvaluator.Abstractions.IParseResult
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.Generic.IReadOnlyCollection<CrossCutting.Utilities.ExpressionEvaluator.ExpressionParsePartResult> PartResults
        {
            get;
        }

        public CrossCutting.Common.Results.ResultStatus Status
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public System.Collections.Generic.IReadOnlyCollection<CrossCutting.Common.Results.ValidationError> ValidationErrors
        {
            get;
        }

        public string? ErrorMessage
        {
            get;
        }

        public System.Exception? Exception
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string SourceExpression
        {
            get;
        }

        public System.Type? ExpressionComponentType
        {
            get;
        }

        public System.Type? ResultType
        {
            get;
        }

        public ExpressionParseResult(System.Collections.Generic.IEnumerable<CrossCutting.Utilities.ExpressionEvaluator.ExpressionParsePartResult> partResults, CrossCutting.Common.Results.ResultStatus status, System.Collections.Generic.IEnumerable<CrossCutting.Common.Results.ValidationError> validationErrors, string? errorMessage, System.Exception? exception, string sourceExpression, System.Type? expressionComponentType, System.Type? resultType)
        {
            this.PartResults = partResults is null ? null! : new CrossCutting.Common.ReadOnlyValueCollection<CrossCutting.Utilities.ExpressionEvaluator.ExpressionParsePartResult>(partResults);
            this.Status = status;
            this.ValidationErrors = validationErrors is null ? null! : new CrossCutting.Common.ReadOnlyValueCollection<CrossCutting.Common.Results.ValidationError>(validationErrors);
            this.ErrorMessage = errorMessage;
            this.Exception = exception;
            this.SourceExpression = sourceExpression;
            this.ExpressionComponentType = expressionComponentType;
            this.ResultType = resultType;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.ExpressionParseResultBuilder ToBuilder()
        {
            return new CrossCutting.Utilities.ExpressionEvaluator.Builders.ExpressionParseResultBuilder(this);
        }
    }
    public partial record FunctionCall
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get;
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Domains.MemberType MemberType
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.Generic.IReadOnlyCollection<string> Arguments
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public System.Collections.Generic.IReadOnlyCollection<System.Type> TypeArguments
        {
            get;
        }

        public FunctionCall(string name, CrossCutting.Utilities.ExpressionEvaluator.Domains.MemberType memberType, System.Collections.Generic.IEnumerable<string> arguments, System.Collections.Generic.IEnumerable<System.Type> typeArguments)
        {
            this.Name = name;
            this.MemberType = memberType;
            this.Arguments = arguments is null ? null! : new CrossCutting.Common.ReadOnlyValueCollection<System.String>(arguments);
            this.TypeArguments = typeArguments is null ? null! : new CrossCutting.Common.ReadOnlyValueCollection<System.Type>(typeArguments);
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionCallBuilder ToBuilder()
        {
            return new CrossCutting.Utilities.ExpressionEvaluator.Builders.FunctionCallBuilder(this);
        }
    }
    public partial record MemberDescriptor
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public System.Type ImplementationType
        {
            get;
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Domains.MemberType MemberType
        {
            get;
        }

        public System.Type? ReturnValueType
        {
            get;
        }

        public System.Type? InstanceType
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string Description
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.Generic.IReadOnlyCollection<CrossCutting.Utilities.ExpressionEvaluator.MemberDescriptorArgument> Arguments
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.Generic.IReadOnlyCollection<CrossCutting.Utilities.ExpressionEvaluator.MemberDescriptorTypeArgument> TypeArguments
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.Generic.IReadOnlyCollection<CrossCutting.Utilities.ExpressionEvaluator.MemberDescriptorResult> Results
        {
            get;
        }

        public MemberDescriptor(string name, System.Type implementationType, CrossCutting.Utilities.ExpressionEvaluator.Domains.MemberType memberType, System.Type? returnValueType, System.Type? instanceType, string description, System.Collections.Generic.IEnumerable<CrossCutting.Utilities.ExpressionEvaluator.MemberDescriptorArgument> arguments, System.Collections.Generic.IEnumerable<CrossCutting.Utilities.ExpressionEvaluator.MemberDescriptorTypeArgument> typeArguments, System.Collections.Generic.IEnumerable<CrossCutting.Utilities.ExpressionEvaluator.MemberDescriptorResult> results)
        {
            this.Name = name;
            this.ImplementationType = implementationType;
            this.MemberType = memberType;
            this.ReturnValueType = returnValueType;
            this.InstanceType = instanceType;
            this.Description = description;
            this.Arguments = arguments is null ? null! : new CrossCutting.Common.ReadOnlyValueCollection<CrossCutting.Utilities.ExpressionEvaluator.MemberDescriptorArgument>(arguments);
            this.TypeArguments = typeArguments is null ? null! : new CrossCutting.Common.ReadOnlyValueCollection<CrossCutting.Utilities.ExpressionEvaluator.MemberDescriptorTypeArgument>(typeArguments);
            this.Results = results is null ? null! : new CrossCutting.Common.ReadOnlyValueCollection<CrossCutting.Utilities.ExpressionEvaluator.MemberDescriptorResult>(results);
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.MemberDescriptorBuilder ToBuilder()
        {
            return new CrossCutting.Utilities.ExpressionEvaluator.Builders.MemberDescriptorBuilder(this);
        }
    }
    public partial record MemberDescriptorArgument
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public System.Type Type
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string Description
        {
            get;
        }

        public bool IsRequired
        {
            get;
        }

        public MemberDescriptorArgument(string name, System.Type type, string description, bool isRequired)
        {
            this.Name = name;
            this.Type = type;
            this.Description = description;
            this.IsRequired = isRequired;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.MemberDescriptorArgumentBuilder ToBuilder()
        {
            return new CrossCutting.Utilities.ExpressionEvaluator.Builders.MemberDescriptorArgumentBuilder(this);
        }
    }
    public partial record MemberDescriptorResult
    {
        public CrossCutting.Common.Results.ResultStatus Status
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string Value
        {
            get;
        }

        public System.Type? ValueType
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string Description
        {
            get;
        }

        public MemberDescriptorResult(CrossCutting.Common.Results.ResultStatus status, string value, System.Type? valueType, string description)
        {
            this.Status = status;
            this.Value = value;
            this.ValueType = valueType;
            this.Description = description;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.MemberDescriptorResultBuilder ToBuilder()
        {
            return new CrossCutting.Utilities.ExpressionEvaluator.Builders.MemberDescriptorResultBuilder(this);
        }
    }
    public partial record MemberDescriptorTypeArgument
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string Description
        {
            get;
        }

        public MemberDescriptorTypeArgument(string name, string description)
        {
            this.Name = name;
            this.Description = description;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public CrossCutting.Utilities.ExpressionEvaluator.Builders.MemberDescriptorTypeArgumentBuilder ToBuilder()
        {
            return new CrossCutting.Utilities.ExpressionEvaluator.Builders.MemberDescriptorTypeArgumentBuilder(this);
        }
    }
}
#nullable disable
