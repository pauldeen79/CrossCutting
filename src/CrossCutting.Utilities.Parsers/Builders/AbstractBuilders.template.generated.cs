// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 9.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace CrossCutting.Utilities.Parsers.Builders
{
    public abstract partial class FunctionCallArgumentBuilder<TBuilder, TEntity> : FunctionCallArgumentBuilder
        where TEntity : CrossCutting.Utilities.Parsers.FunctionCallArgument
        where TBuilder : FunctionCallArgumentBuilder<TBuilder, TEntity>
    {
        protected FunctionCallArgumentBuilder(CrossCutting.Utilities.Parsers.FunctionCallArgument source) : base(source)
        {
        }

        protected FunctionCallArgumentBuilder() : base()
        {
        }

        public override CrossCutting.Utilities.Parsers.FunctionCallArgument Build()
        {
            return BuildTyped();
        }

        public abstract TEntity BuildTyped();
    }
    public abstract partial class FunctionDescriptorArgumentBaseBuilder<TBuilder, TEntity> : FunctionDescriptorArgumentBaseBuilder, CrossCutting.Utilities.Parsers.Builders.Abstractions.IFunctionDescriptorArgumentBuilder
        where TEntity : CrossCutting.Utilities.Parsers.FunctionDescriptorArgumentBase
        where TBuilder : FunctionDescriptorArgumentBaseBuilder<TBuilder, TEntity>
    {
        protected FunctionDescriptorArgumentBaseBuilder(CrossCutting.Utilities.Parsers.FunctionDescriptorArgumentBase source) : base(source)
        {
        }

        protected FunctionDescriptorArgumentBaseBuilder() : base()
        {
        }

        public override CrossCutting.Utilities.Parsers.FunctionDescriptorArgumentBase Build()
        {
            return BuildTyped();
        }

        public abstract TEntity BuildTyped();

        public TBuilder WithName(string name)
        {
            if (name is null) throw new System.ArgumentNullException(nameof(name));
            Name = name;
            return (TBuilder)this;
        }

        public TBuilder WithDescription(string description)
        {
            if (description is null) throw new System.ArgumentNullException(nameof(description));
            Description = description;
            return (TBuilder)this;
        }

        public TBuilder WithIsRequired(bool isRequired = true)
        {
            IsRequired = isRequired;
            return (TBuilder)this;
        }
    }
}
#nullable disable
