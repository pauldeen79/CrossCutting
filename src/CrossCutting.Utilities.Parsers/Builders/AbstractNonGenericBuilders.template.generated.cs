// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 9.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace CrossCutting.Utilities.Parsers.Builders
{
    public abstract partial class FunctionCallArgumentBuilder : System.ComponentModel.INotifyPropertyChanged
    {
        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        protected FunctionCallArgumentBuilder(CrossCutting.Utilities.Parsers.FunctionCallArgument source)
        {
        }

        protected FunctionCallArgumentBuilder()
        {
            SetDefaultValues();
        }

        public abstract CrossCutting.Utilities.Parsers.FunctionCallArgument Build();

        partial void SetDefaultValues();

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public abstract partial class FunctionDescriptorArgumentBaseBuilder : CrossCutting.Utilities.Parsers.Builders.Abstractions.IFunctionDescriptorArgumentBuilder, System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;

        private string _description;

        private bool _isRequired;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_name!, value!);
                _name = value;
                if (hasChanged) HandlePropertyChanged(nameof(Name));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_description!, value!);
                _description = value;
                if (hasChanged) HandlePropertyChanged(nameof(Description));
            }
        }

        public bool IsRequired
        {
            get
            {
                return _isRequired;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_isRequired, value);
                _isRequired = value;
                if (hasChanged) HandlePropertyChanged(nameof(IsRequired));
            }
        }

        protected FunctionDescriptorArgumentBaseBuilder(CrossCutting.Utilities.Parsers.FunctionDescriptorArgumentBase source)
        {
            _name = source.Name;
            _description = source.Description;
            _isRequired = source.IsRequired;
        }

        protected FunctionDescriptorArgumentBaseBuilder()
        {
            _name = string.Empty;
            _description = string.Empty;
            SetDefaultValues();
        }

        public abstract CrossCutting.Utilities.Parsers.FunctionDescriptorArgumentBase Build();

        partial void SetDefaultValues();

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
}
#nullable disable
