// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 9.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace CrossCutting.Utilities.Parsers.Builders
{
    public partial class FormattableStringParserSettingsBuilder : System.ComponentModel.INotifyPropertyChanged
    {
        private System.IFormatProvider _formatProvider;

        private string _placeholderStart;

        private string _placeholderEnd;

        private bool _escapeBraces;

        private int _maximumRecursion;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        public System.IFormatProvider FormatProvider
        {
            get
            {
                return _formatProvider;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.IFormatProvider>.Default.Equals(_formatProvider!, value!);
                _formatProvider = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(FormatProvider));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string PlaceholderStart
        {
            get
            {
                return _placeholderStart;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_placeholderStart!, value!);
                _placeholderStart = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(PlaceholderStart));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string PlaceholderEnd
        {
            get
            {
                return _placeholderEnd;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_placeholderEnd!, value!);
                _placeholderEnd = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(PlaceholderEnd));
            }
        }

        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool EscapeBraces
        {
            get
            {
                return _escapeBraces;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_escapeBraces, value);
                _escapeBraces = value;
                if (hasChanged) HandlePropertyChanged(nameof(EscapeBraces));
            }
        }

        [System.ComponentModel.DefaultValueAttribute(10)]
        public int MaximumRecursion
        {
            get
            {
                return _maximumRecursion;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Int32>.Default.Equals(_maximumRecursion, value);
                _maximumRecursion = value;
                if (hasChanged) HandlePropertyChanged(nameof(MaximumRecursion));
            }
        }

        public FormattableStringParserSettingsBuilder(CrossCutting.Utilities.Parsers.FormattableStringParserSettings source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _formatProvider = source.FormatProvider;
            _placeholderStart = source.PlaceholderStart;
            _placeholderEnd = source.PlaceholderEnd;
            _escapeBraces = source.EscapeBraces;
            _maximumRecursion = source.MaximumRecursion;
        }

        public FormattableStringParserSettingsBuilder()
        {
            _formatProvider = System.Globalization.CultureInfo.InvariantCulture!;
            _placeholderStart = string.Empty;
            _placeholderEnd = string.Empty;
            _escapeBraces = true;
            _maximumRecursion = 10;
            SetDefaultValues();
        }

        public CrossCutting.Utilities.Parsers.FormattableStringParserSettings Build()
        {
            return new CrossCutting.Utilities.Parsers.FormattableStringParserSettings(FormatProvider, PlaceholderStart, PlaceholderEnd, EscapeBraces, MaximumRecursion);
        }

        partial void SetDefaultValues();

        public CrossCutting.Utilities.Parsers.Builders.FormattableStringParserSettingsBuilder WithFormatProvider(System.IFormatProvider formatProvider)
        {
            if (formatProvider is null) throw new System.ArgumentNullException(nameof(formatProvider));
            FormatProvider = formatProvider;
            return this;
        }

        public CrossCutting.Utilities.Parsers.Builders.FormattableStringParserSettingsBuilder WithPlaceholderStart(string placeholderStart)
        {
            if (placeholderStart is null) throw new System.ArgumentNullException(nameof(placeholderStart));
            PlaceholderStart = placeholderStart;
            return this;
        }

        public CrossCutting.Utilities.Parsers.Builders.FormattableStringParserSettingsBuilder WithPlaceholderEnd(string placeholderEnd)
        {
            if (placeholderEnd is null) throw new System.ArgumentNullException(nameof(placeholderEnd));
            PlaceholderEnd = placeholderEnd;
            return this;
        }

        public CrossCutting.Utilities.Parsers.Builders.FormattableStringParserSettingsBuilder WithEscapeBraces(bool escapeBraces = true)
        {
            EscapeBraces = escapeBraces;
            return this;
        }

        public CrossCutting.Utilities.Parsers.Builders.FormattableStringParserSettingsBuilder WithMaximumRecursion(int maximumRecursion)
        {
            MaximumRecursion = maximumRecursion;
            return this;
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public partial class FunctionCallBuilder : System.ComponentModel.INotifyPropertyChanged
    {
        private string _functionName;

        private System.Collections.Generic.List<CrossCutting.Utilities.Parsers.Builders.FunctionCallArgumentBuilder> _arguments;

        private System.IFormatProvider _formatProvider;

        private object? _context;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string FunctionName
        {
            get
            {
                return _functionName;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_functionName!, value!);
                _functionName = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(FunctionName));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.Generic.List<CrossCutting.Utilities.Parsers.Builders.FunctionCallArgumentBuilder> Arguments
        {
            get
            {
                return _arguments;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<CrossCutting.Utilities.Parsers.Builders.FunctionCallArgumentBuilder>>.Default.Equals(_arguments!, value!);
                _arguments = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Arguments));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public System.IFormatProvider FormatProvider
        {
            get
            {
                return _formatProvider;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.IFormatProvider>.Default.Equals(_formatProvider!, value!);
                _formatProvider = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(FormatProvider));
            }
        }

        public object? Context
        {
            get
            {
                return _context;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Object>.Default.Equals(_context!, value!);
                _context = value;
                if (hasChanged) HandlePropertyChanged(nameof(Context));
            }
        }

        public FunctionCallBuilder(CrossCutting.Utilities.Parsers.FunctionCall source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _arguments = new System.Collections.Generic.List<CrossCutting.Utilities.Parsers.Builders.FunctionCallArgumentBuilder>();
            _functionName = source.FunctionName;
            if (source.Arguments is not null) foreach (var item in source.Arguments.Select(x => x.ToBuilder())) _arguments.Add(item);
            _formatProvider = source.FormatProvider;
            _context = source.Context;
        }

        public FunctionCallBuilder()
        {
            _arguments = new System.Collections.Generic.List<CrossCutting.Utilities.Parsers.Builders.FunctionCallArgumentBuilder>();
            _functionName = string.Empty;
            _formatProvider = System.Globalization.CultureInfo.InvariantCulture!;
            SetDefaultValues();
        }

        public CrossCutting.Utilities.Parsers.FunctionCall Build()
        {
            return new CrossCutting.Utilities.Parsers.FunctionCall(FunctionName, Arguments.Select(x => x.Build()!).ToList().AsReadOnly(), FormatProvider, Context);
        }

        partial void SetDefaultValues();

        public CrossCutting.Utilities.Parsers.Builders.FunctionCallBuilder AddArguments(System.Collections.Generic.IEnumerable<CrossCutting.Utilities.Parsers.Builders.FunctionCallArgumentBuilder> arguments)
        {
            if (arguments is null) throw new System.ArgumentNullException(nameof(arguments));
            return AddArguments(arguments.ToArray());
        }

        public CrossCutting.Utilities.Parsers.Builders.FunctionCallBuilder AddArguments(params CrossCutting.Utilities.Parsers.Builders.FunctionCallArgumentBuilder[] arguments)
        {
            if (arguments is null) throw new System.ArgumentNullException(nameof(arguments));
            foreach (var item in arguments) Arguments.Add(item);
            return this;
        }

        public CrossCutting.Utilities.Parsers.Builders.FunctionCallBuilder WithFunctionName(string functionName)
        {
            if (functionName is null) throw new System.ArgumentNullException(nameof(functionName));
            FunctionName = functionName;
            return this;
        }

        public CrossCutting.Utilities.Parsers.Builders.FunctionCallBuilder WithFormatProvider(System.IFormatProvider formatProvider)
        {
            if (formatProvider is null) throw new System.ArgumentNullException(nameof(formatProvider));
            FormatProvider = formatProvider;
            return this;
        }

        public CrossCutting.Utilities.Parsers.Builders.FunctionCallBuilder WithContext(object? context)
        {
            Context = context;
            return this;
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public partial class FunctionDescriptorArgumentBuilder : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;

        private string _typeName;

        private string _description;

        private bool _isRequired;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_name!, value!);
                _name = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Name));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string TypeName
        {
            get
            {
                return _typeName;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_typeName!, value!);
                _typeName = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(TypeName));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_description!, value!);
                _description = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Description));
            }
        }

        public bool IsRequired
        {
            get
            {
                return _isRequired;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_isRequired, value);
                _isRequired = value;
                if (hasChanged) HandlePropertyChanged(nameof(IsRequired));
            }
        }

        public FunctionDescriptorArgumentBuilder(CrossCutting.Utilities.Parsers.FunctionDescriptorArgument source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _name = source.Name;
            _typeName = source.TypeName;
            _description = source.Description;
            _isRequired = source.IsRequired;
        }

        public FunctionDescriptorArgumentBuilder()
        {
            _name = string.Empty;
            _typeName = string.Empty;
            _description = string.Empty;
            SetDefaultValues();
        }

        public CrossCutting.Utilities.Parsers.FunctionDescriptorArgument Build()
        {
            return new CrossCutting.Utilities.Parsers.FunctionDescriptorArgument(Name, TypeName, Description, IsRequired);
        }

        partial void SetDefaultValues();

        public CrossCutting.Utilities.Parsers.Builders.FunctionDescriptorArgumentBuilder WithName(string name)
        {
            if (name is null) throw new System.ArgumentNullException(nameof(name));
            Name = name;
            return this;
        }

        public CrossCutting.Utilities.Parsers.Builders.FunctionDescriptorArgumentBuilder WithTypeName(string typeName)
        {
            if (typeName is null) throw new System.ArgumentNullException(nameof(typeName));
            TypeName = typeName;
            return this;
        }

        public CrossCutting.Utilities.Parsers.Builders.FunctionDescriptorArgumentBuilder WithDescription(string description)
        {
            if (description is null) throw new System.ArgumentNullException(nameof(description));
            Description = description;
            return this;
        }

        public CrossCutting.Utilities.Parsers.Builders.FunctionDescriptorArgumentBuilder WithIsRequired(bool isRequired = true)
        {
            IsRequired = isRequired;
            return this;
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public partial class FunctionDescriptorBuilder : System.ComponentModel.INotifyPropertyChanged
    {
        private string _functionName;

        private System.Collections.Generic.List<CrossCutting.Utilities.Parsers.Builders.FunctionDescriptorArgumentBuilder> _arguments;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string FunctionName
        {
            get
            {
                return _functionName;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_functionName!, value!);
                _functionName = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(FunctionName));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.Generic.List<CrossCutting.Utilities.Parsers.Builders.FunctionDescriptorArgumentBuilder> Arguments
        {
            get
            {
                return _arguments;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<CrossCutting.Utilities.Parsers.Builders.FunctionDescriptorArgumentBuilder>>.Default.Equals(_arguments!, value!);
                _arguments = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Arguments));
            }
        }

        public FunctionDescriptorBuilder(CrossCutting.Utilities.Parsers.FunctionDescriptor source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _arguments = new System.Collections.Generic.List<CrossCutting.Utilities.Parsers.Builders.FunctionDescriptorArgumentBuilder>();
            _functionName = source.FunctionName;
            if (source.Arguments is not null) foreach (var item in source.Arguments.Select(x => x.ToBuilder())) _arguments.Add(item);
        }

        public FunctionDescriptorBuilder()
        {
            _arguments = new System.Collections.Generic.List<CrossCutting.Utilities.Parsers.Builders.FunctionDescriptorArgumentBuilder>();
            _functionName = string.Empty;
            SetDefaultValues();
        }

        public CrossCutting.Utilities.Parsers.FunctionDescriptor Build()
        {
            return new CrossCutting.Utilities.Parsers.FunctionDescriptor(FunctionName, Arguments.Select(x => x.Build()!).ToList().AsReadOnly());
        }

        partial void SetDefaultValues();

        public CrossCutting.Utilities.Parsers.Builders.FunctionDescriptorBuilder AddArguments(System.Collections.Generic.IEnumerable<CrossCutting.Utilities.Parsers.Builders.FunctionDescriptorArgumentBuilder> arguments)
        {
            if (arguments is null) throw new System.ArgumentNullException(nameof(arguments));
            return AddArguments(arguments.ToArray());
        }

        public CrossCutting.Utilities.Parsers.Builders.FunctionDescriptorBuilder AddArguments(params CrossCutting.Utilities.Parsers.Builders.FunctionDescriptorArgumentBuilder[] arguments)
        {
            if (arguments is null) throw new System.ArgumentNullException(nameof(arguments));
            foreach (var item in arguments) Arguments.Add(item);
            return this;
        }

        public CrossCutting.Utilities.Parsers.Builders.FunctionDescriptorBuilder WithFunctionName(string functionName)
        {
            if (functionName is null) throw new System.ArgumentNullException(nameof(functionName));
            FunctionName = functionName;
            return this;
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
}
#nullable disable
