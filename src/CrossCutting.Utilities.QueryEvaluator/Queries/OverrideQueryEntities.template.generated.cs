// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 9.0.7
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace CrossCutting.Utilities.QueryEvaluator.Core.Queries
{
    public partial record ParameterizedQuery : CrossCutting.Utilities.QueryEvaluator.Core.QueryBase, CrossCutting.Utilities.QueryEvaluator.Abstractions.IQuery
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.Generic.IReadOnlyCollection<CrossCutting.Utilities.QueryEvaluator.Core.QueryParameter> Parameters
        {
            get;
        }

        public ParameterizedQuery(System.Collections.Generic.IEnumerable<CrossCutting.Utilities.QueryEvaluator.Core.QueryParameter> parameters, System.Nullable<int> limit, System.Nullable<int> offset, System.Collections.Generic.IEnumerable<CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition> conditions, System.Collections.Generic.IEnumerable<CrossCutting.Utilities.QueryEvaluator.Abstractions.ISortOrder> sortOrders) : base(limit, offset, conditions, sortOrders)
        {
            this.Parameters = parameters is null ? null! : new CrossCutting.Common.ReadOnlyValueCollection<CrossCutting.Utilities.QueryEvaluator.Core.QueryParameter>(parameters);
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override CrossCutting.Utilities.QueryEvaluator.Core.Builders.QueryBaseBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public CrossCutting.Utilities.QueryEvaluator.Core.Builders.Queries.ParameterizedQueryBuilder ToTypedBuilder()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Core.Builders.Queries.ParameterizedQueryBuilder(this);
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IQueryBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.IQuery.ToBuilder()
        {
            return ToTypedBuilder();
        }
    }
    public partial record SingleEntityQuery : CrossCutting.Utilities.QueryEvaluator.Core.QueryBase, CrossCutting.Utilities.QueryEvaluator.Abstractions.IQuery
    {
        public SingleEntityQuery(System.Nullable<int> limit, System.Nullable<int> offset, System.Collections.Generic.IEnumerable<CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition> conditions, System.Collections.Generic.IEnumerable<CrossCutting.Utilities.QueryEvaluator.Abstractions.ISortOrder> sortOrders) : base(limit, offset, conditions, sortOrders)
        {
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override CrossCutting.Utilities.QueryEvaluator.Core.Builders.QueryBaseBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public CrossCutting.Utilities.QueryEvaluator.Core.Builders.Queries.SingleEntityQueryBuilder ToTypedBuilder()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Core.Builders.Queries.SingleEntityQueryBuilder(this);
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IQueryBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.IQuery.ToBuilder()
        {
            return ToTypedBuilder();
        }
    }
}
#nullable disable
