// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 9.0.6
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace CrossCutting.Utilities.QueryEvaluator
{
    public abstract partial record Condition
    {
        public System.Nullable<CrossCutting.Utilities.QueryEvaluator.Domains.Combination> Combination
        {
            get;
        }

        public bool StartGroup
        {
            get;
        }

        public bool EndGroup
        {
            get;
        }

        protected Condition(System.Nullable<CrossCutting.Utilities.QueryEvaluator.Domains.Combination> combination, bool startGroup, bool endGroup)
        {
            this.Combination = combination;
            this.StartGroup = startGroup;
            this.EndGroup = endGroup;
        }

        public abstract CrossCutting.Utilities.QueryEvaluator.Builders.ConditionBuilder ToBuilder();
    }
    public abstract partial record Expression
    {
        protected Expression()
        {
        }

        public abstract CrossCutting.Utilities.QueryEvaluator.Builders.ExpressionBuilder ToBuilder();
    }
    public abstract partial record Query
    {
        public System.Nullable<int> Limit
        {
            get;
        }

        public System.Nullable<int> Offset
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        [CrossCutting.Utilities.QueryEvaluator.Validation.ValidGroupsAttribute]
        public System.Collections.Generic.IReadOnlyCollection<CrossCutting.Utilities.QueryEvaluator.Condition> Filter
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.Generic.IReadOnlyCollection<CrossCutting.Utilities.QueryEvaluator.QuerySortOrder> OrderByFields
        {
            get;
        }

        protected Query(System.Nullable<int> limit, System.Nullable<int> offset, System.Collections.Generic.IEnumerable<CrossCutting.Utilities.QueryEvaluator.Condition> filter, System.Collections.Generic.IEnumerable<CrossCutting.Utilities.QueryEvaluator.QuerySortOrder> orderByFields)
        {
            if (filter is null) throw new System.ArgumentNullException(nameof(filter));
            if (orderByFields is null) throw new System.ArgumentNullException(nameof(orderByFields));
            this.Limit = limit;
            this.Offset = offset;
            this.Filter = new CrossCutting.Common.ReadOnlyValueCollection<CrossCutting.Utilities.QueryEvaluator.Condition>(filter);
            this.OrderByFields = new CrossCutting.Common.ReadOnlyValueCollection<CrossCutting.Utilities.QueryEvaluator.QuerySortOrder>(orderByFields);
        }

        public abstract CrossCutting.Utilities.QueryEvaluator.Builders.QueryBuilder ToBuilder();
    }
}
#nullable disable
