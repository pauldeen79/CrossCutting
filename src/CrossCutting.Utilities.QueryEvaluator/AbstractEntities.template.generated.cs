// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 9.0.6
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace CrossCutting.Utilities.QueryEvaluator
{
    public abstract partial record ConditionBase : CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition
    {
        public System.Nullable<CrossCutting.Utilities.QueryEvaluator.Abstractions.Domains.Combination> Combination
        {
            get;
        }

        public bool StartGroup
        {
            get;
        }

        public bool EndGroup
        {
            get;
        }

        protected ConditionBase(System.Nullable<CrossCutting.Utilities.QueryEvaluator.Abstractions.Domains.Combination> combination, bool startGroup, bool endGroup)
        {
            this.Combination = combination;
            this.StartGroup = startGroup;
            this.EndGroup = endGroup;
        }

        public abstract CrossCutting.Utilities.QueryEvaluator.Builders.ConditionBaseBuilder ToBuilder();

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition.ToBuilder()
        {
            return ToBuilder();
        }
    }
    public abstract partial record ExpressionBase : CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression
    {
        protected ExpressionBase()
        {
        }

        public abstract CrossCutting.Utilities.QueryEvaluator.Builders.ExpressionBaseBuilder ToBuilder();

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression.ToBuilder()
        {
            return ToBuilder();
        }
    }
    public abstract partial record QueryBase : CrossCutting.Utilities.QueryEvaluator.Abstractions.IQuery
    {
        public System.Nullable<int> Limit
        {
            get;
        }

        public System.Nullable<int> Offset
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        [CrossCutting.Utilities.QueryEvaluator.Abstractions.Validation.ValidGroupsAttribute]
        public System.Collections.Generic.IReadOnlyCollection<CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition> Filter
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.Generic.IReadOnlyCollection<CrossCutting.Utilities.QueryEvaluator.Abstractions.IQuerySortOrder> OrderByFields
        {
            get;
        }

        protected QueryBase(System.Nullable<int> limit, System.Nullable<int> offset, System.Collections.Generic.IEnumerable<CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition> filter, System.Collections.Generic.IEnumerable<CrossCutting.Utilities.QueryEvaluator.Abstractions.IQuerySortOrder> orderByFields)
        {
            if (filter is null) throw new System.ArgumentNullException(nameof(filter));
            if (orderByFields is null) throw new System.ArgumentNullException(nameof(orderByFields));
            this.Limit = limit;
            this.Offset = offset;
            this.Filter = new CrossCutting.Common.ReadOnlyValueCollection<CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition>(filter);
            this.OrderByFields = new CrossCutting.Common.ReadOnlyValueCollection<CrossCutting.Utilities.QueryEvaluator.Abstractions.IQuerySortOrder>(orderByFields);
        }

        public abstract CrossCutting.Utilities.QueryEvaluator.Builders.QueryBaseBuilder ToBuilder();

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IQueryBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.IQuery.ToBuilder()
        {
            return ToBuilder();
        }
    }
}
#nullable disable
