// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 9.0.7
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace CrossCutting.Utilities.QueryEvaluator.Core.Conditions
{
    public partial record EqualCondition : CrossCutting.Utilities.QueryEvaluator.Core.ConditionBase, CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition, CrossCutting.Utilities.QueryEvaluator.Abstractions.IDoubleExpressionContainer, CrossCutting.Utilities.QueryEvaluator.Abstractions.ISingleExpressionContainer
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression SecondExpression
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression FirstExpression
        {
            get;
        }

        public EqualCondition(System.Nullable<CrossCutting.Utilities.QueryEvaluator.Abstractions.Domains.Combination> combination, bool startGroup, bool endGroup, CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression secondExpression, CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression firstExpression) : base(combination, startGroup, endGroup)
        {
            this.SecondExpression = secondExpression;
            this.FirstExpression = firstExpression;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override CrossCutting.Utilities.QueryEvaluator.Core.Builders.ConditionBaseBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public CrossCutting.Utilities.QueryEvaluator.Core.Builders.Conditions.EqualConditionBuilder ToTypedBuilder()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Core.Builders.Conditions.EqualConditionBuilder(this);
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition.ToBuilder()
        {
            return ToTypedBuilder();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IDoubleExpressionContainerBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.IDoubleExpressionContainer.ToBuilder()
        {
            return ToTypedBuilder();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISingleExpressionContainerBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.ISingleExpressionContainer.ToBuilder()
        {
            return ToTypedBuilder();
        }
    }
    public partial record GreaterThanCondition : CrossCutting.Utilities.QueryEvaluator.Core.ConditionBase, CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition, CrossCutting.Utilities.QueryEvaluator.Abstractions.IDoubleExpressionContainer, CrossCutting.Utilities.QueryEvaluator.Abstractions.ISingleExpressionContainer
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression SecondExpression
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression FirstExpression
        {
            get;
        }

        public GreaterThanCondition(System.Nullable<CrossCutting.Utilities.QueryEvaluator.Abstractions.Domains.Combination> combination, bool startGroup, bool endGroup, CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression secondExpression, CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression firstExpression) : base(combination, startGroup, endGroup)
        {
            this.SecondExpression = secondExpression;
            this.FirstExpression = firstExpression;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override CrossCutting.Utilities.QueryEvaluator.Core.Builders.ConditionBaseBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public CrossCutting.Utilities.QueryEvaluator.Core.Builders.Conditions.GreaterThanConditionBuilder ToTypedBuilder()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Core.Builders.Conditions.GreaterThanConditionBuilder(this);
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition.ToBuilder()
        {
            return ToTypedBuilder();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IDoubleExpressionContainerBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.IDoubleExpressionContainer.ToBuilder()
        {
            return ToTypedBuilder();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISingleExpressionContainerBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.ISingleExpressionContainer.ToBuilder()
        {
            return ToTypedBuilder();
        }
    }
    public partial record GreaterThanOrEqualCondition : CrossCutting.Utilities.QueryEvaluator.Core.ConditionBase, CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition, CrossCutting.Utilities.QueryEvaluator.Abstractions.IDoubleExpressionContainer, CrossCutting.Utilities.QueryEvaluator.Abstractions.ISingleExpressionContainer
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression SecondExpression
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression FirstExpression
        {
            get;
        }

        public GreaterThanOrEqualCondition(System.Nullable<CrossCutting.Utilities.QueryEvaluator.Abstractions.Domains.Combination> combination, bool startGroup, bool endGroup, CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression secondExpression, CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression firstExpression) : base(combination, startGroup, endGroup)
        {
            this.SecondExpression = secondExpression;
            this.FirstExpression = firstExpression;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override CrossCutting.Utilities.QueryEvaluator.Core.Builders.ConditionBaseBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public CrossCutting.Utilities.QueryEvaluator.Core.Builders.Conditions.GreaterThanOrEqualConditionBuilder ToTypedBuilder()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Core.Builders.Conditions.GreaterThanOrEqualConditionBuilder(this);
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition.ToBuilder()
        {
            return ToTypedBuilder();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IDoubleExpressionContainerBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.IDoubleExpressionContainer.ToBuilder()
        {
            return ToTypedBuilder();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISingleExpressionContainerBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.ISingleExpressionContainer.ToBuilder()
        {
            return ToTypedBuilder();
        }
    }
    public partial record InCondition : CrossCutting.Utilities.QueryEvaluator.Core.ConditionBase, CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition, CrossCutting.Utilities.QueryEvaluator.Abstractions.IDoubleExpressionContainer, CrossCutting.Utilities.QueryEvaluator.Abstractions.ISingleExpressionContainer
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression SecondExpression
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression FirstExpression
        {
            get;
        }

        public InCondition(System.Nullable<CrossCutting.Utilities.QueryEvaluator.Abstractions.Domains.Combination> combination, bool startGroup, bool endGroup, CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression secondExpression, CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression firstExpression) : base(combination, startGroup, endGroup)
        {
            this.SecondExpression = secondExpression;
            this.FirstExpression = firstExpression;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override CrossCutting.Utilities.QueryEvaluator.Core.Builders.ConditionBaseBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public CrossCutting.Utilities.QueryEvaluator.Core.Builders.Conditions.InConditionBuilder ToTypedBuilder()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Core.Builders.Conditions.InConditionBuilder(this);
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition.ToBuilder()
        {
            return ToTypedBuilder();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IDoubleExpressionContainerBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.IDoubleExpressionContainer.ToBuilder()
        {
            return ToTypedBuilder();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISingleExpressionContainerBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.ISingleExpressionContainer.ToBuilder()
        {
            return ToTypedBuilder();
        }
    }
    public partial record NotEqualCondition : CrossCutting.Utilities.QueryEvaluator.Core.ConditionBase, CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition, CrossCutting.Utilities.QueryEvaluator.Abstractions.IDoubleExpressionContainer, CrossCutting.Utilities.QueryEvaluator.Abstractions.ISingleExpressionContainer
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression SecondExpression
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression FirstExpression
        {
            get;
        }

        public NotEqualCondition(System.Nullable<CrossCutting.Utilities.QueryEvaluator.Abstractions.Domains.Combination> combination, bool startGroup, bool endGroup, CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression secondExpression, CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression firstExpression) : base(combination, startGroup, endGroup)
        {
            this.SecondExpression = secondExpression;
            this.FirstExpression = firstExpression;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override CrossCutting.Utilities.QueryEvaluator.Core.Builders.ConditionBaseBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public CrossCutting.Utilities.QueryEvaluator.Core.Builders.Conditions.NotEqualConditionBuilder ToTypedBuilder()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Core.Builders.Conditions.NotEqualConditionBuilder(this);
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition.ToBuilder()
        {
            return ToTypedBuilder();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IDoubleExpressionContainerBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.IDoubleExpressionContainer.ToBuilder()
        {
            return ToTypedBuilder();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISingleExpressionContainerBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.ISingleExpressionContainer.ToBuilder()
        {
            return ToTypedBuilder();
        }
    }
    public partial record NotInCondition : CrossCutting.Utilities.QueryEvaluator.Core.ConditionBase, CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition, CrossCutting.Utilities.QueryEvaluator.Abstractions.IDoubleExpressionContainer, CrossCutting.Utilities.QueryEvaluator.Abstractions.ISingleExpressionContainer
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression SecondExpression
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression FirstExpression
        {
            get;
        }

        public NotInCondition(System.Nullable<CrossCutting.Utilities.QueryEvaluator.Abstractions.Domains.Combination> combination, bool startGroup, bool endGroup, CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression secondExpression, CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression firstExpression) : base(combination, startGroup, endGroup)
        {
            this.SecondExpression = secondExpression;
            this.FirstExpression = firstExpression;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override CrossCutting.Utilities.QueryEvaluator.Core.Builders.ConditionBaseBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public CrossCutting.Utilities.QueryEvaluator.Core.Builders.Conditions.NotInConditionBuilder ToTypedBuilder()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Core.Builders.Conditions.NotInConditionBuilder(this);
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition.ToBuilder()
        {
            return ToTypedBuilder();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IDoubleExpressionContainerBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.IDoubleExpressionContainer.ToBuilder()
        {
            return ToTypedBuilder();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISingleExpressionContainerBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.ISingleExpressionContainer.ToBuilder()
        {
            return ToTypedBuilder();
        }
    }
    public partial record NotNullCondition : CrossCutting.Utilities.QueryEvaluator.Core.ConditionBase, CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition, CrossCutting.Utilities.QueryEvaluator.Abstractions.ISingleExpressionContainer
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression FirstExpression
        {
            get;
        }

        public NotNullCondition(System.Nullable<CrossCutting.Utilities.QueryEvaluator.Abstractions.Domains.Combination> combination, bool startGroup, bool endGroup, CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression firstExpression) : base(combination, startGroup, endGroup)
        {
            this.FirstExpression = firstExpression;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override CrossCutting.Utilities.QueryEvaluator.Core.Builders.ConditionBaseBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public CrossCutting.Utilities.QueryEvaluator.Core.Builders.Conditions.NotNullConditionBuilder ToTypedBuilder()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Core.Builders.Conditions.NotNullConditionBuilder(this);
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition.ToBuilder()
        {
            return ToTypedBuilder();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISingleExpressionContainerBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.ISingleExpressionContainer.ToBuilder()
        {
            return ToTypedBuilder();
        }
    }
    public partial record NullCondition : CrossCutting.Utilities.QueryEvaluator.Core.ConditionBase, CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition, CrossCutting.Utilities.QueryEvaluator.Abstractions.ISingleExpressionContainer
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression FirstExpression
        {
            get;
        }

        public NullCondition(System.Nullable<CrossCutting.Utilities.QueryEvaluator.Abstractions.Domains.Combination> combination, bool startGroup, bool endGroup, CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression firstExpression) : base(combination, startGroup, endGroup)
        {
            this.FirstExpression = firstExpression;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override CrossCutting.Utilities.QueryEvaluator.Core.Builders.ConditionBaseBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public CrossCutting.Utilities.QueryEvaluator.Core.Builders.Conditions.NullConditionBuilder ToTypedBuilder()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Core.Builders.Conditions.NullConditionBuilder(this);
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition.ToBuilder()
        {
            return ToTypedBuilder();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISingleExpressionContainerBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.ISingleExpressionContainer.ToBuilder()
        {
            return ToTypedBuilder();
        }
    }
    public partial record SmallerThanCondition : CrossCutting.Utilities.QueryEvaluator.Core.ConditionBase, CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition, CrossCutting.Utilities.QueryEvaluator.Abstractions.IDoubleExpressionContainer, CrossCutting.Utilities.QueryEvaluator.Abstractions.ISingleExpressionContainer
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression SecondExpression
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression FirstExpression
        {
            get;
        }

        public SmallerThanCondition(System.Nullable<CrossCutting.Utilities.QueryEvaluator.Abstractions.Domains.Combination> combination, bool startGroup, bool endGroup, CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression secondExpression, CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression firstExpression) : base(combination, startGroup, endGroup)
        {
            this.SecondExpression = secondExpression;
            this.FirstExpression = firstExpression;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override CrossCutting.Utilities.QueryEvaluator.Core.Builders.ConditionBaseBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public CrossCutting.Utilities.QueryEvaluator.Core.Builders.Conditions.SmallerThanConditionBuilder ToTypedBuilder()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Core.Builders.Conditions.SmallerThanConditionBuilder(this);
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition.ToBuilder()
        {
            return ToTypedBuilder();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IDoubleExpressionContainerBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.IDoubleExpressionContainer.ToBuilder()
        {
            return ToTypedBuilder();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISingleExpressionContainerBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.ISingleExpressionContainer.ToBuilder()
        {
            return ToTypedBuilder();
        }
    }
    public partial record SmallerThanOrEqualCondition : CrossCutting.Utilities.QueryEvaluator.Core.ConditionBase, CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition, CrossCutting.Utilities.QueryEvaluator.Abstractions.IDoubleExpressionContainer, CrossCutting.Utilities.QueryEvaluator.Abstractions.ISingleExpressionContainer
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression SecondExpression
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression FirstExpression
        {
            get;
        }

        public SmallerThanOrEqualCondition(System.Nullable<CrossCutting.Utilities.QueryEvaluator.Abstractions.Domains.Combination> combination, bool startGroup, bool endGroup, CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression secondExpression, CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression firstExpression) : base(combination, startGroup, endGroup)
        {
            this.SecondExpression = secondExpression;
            this.FirstExpression = firstExpression;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override CrossCutting.Utilities.QueryEvaluator.Core.Builders.ConditionBaseBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public CrossCutting.Utilities.QueryEvaluator.Core.Builders.Conditions.SmallerThanOrEqualConditionBuilder ToTypedBuilder()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Core.Builders.Conditions.SmallerThanOrEqualConditionBuilder(this);
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition.ToBuilder()
        {
            return ToTypedBuilder();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IDoubleExpressionContainerBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.IDoubleExpressionContainer.ToBuilder()
        {
            return ToTypedBuilder();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISingleExpressionContainerBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.ISingleExpressionContainer.ToBuilder()
        {
            return ToTypedBuilder();
        }
    }
    public partial record StringContainsCondition : CrossCutting.Utilities.QueryEvaluator.Core.ConditionBase, CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition, CrossCutting.Utilities.QueryEvaluator.Abstractions.IDoubleExpressionContainer, CrossCutting.Utilities.QueryEvaluator.Abstractions.ISingleExpressionContainer, CrossCutting.Utilities.QueryEvaluator.Abstractions.IStringComparisonContainer
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression SecondExpression
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression FirstExpression
        {
            get;
        }

        public System.StringComparison StringComparison
        {
            get;
        }

        public StringContainsCondition(System.Nullable<CrossCutting.Utilities.QueryEvaluator.Abstractions.Domains.Combination> combination, bool startGroup, bool endGroup, CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression secondExpression, CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression firstExpression, System.StringComparison stringComparison) : base(combination, startGroup, endGroup)
        {
            this.SecondExpression = secondExpression;
            this.FirstExpression = firstExpression;
            this.StringComparison = stringComparison;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override CrossCutting.Utilities.QueryEvaluator.Core.Builders.ConditionBaseBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public CrossCutting.Utilities.QueryEvaluator.Core.Builders.Conditions.StringContainsConditionBuilder ToTypedBuilder()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Core.Builders.Conditions.StringContainsConditionBuilder(this);
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition.ToBuilder()
        {
            return ToTypedBuilder();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IDoubleExpressionContainerBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.IDoubleExpressionContainer.ToBuilder()
        {
            return ToTypedBuilder();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISingleExpressionContainerBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.ISingleExpressionContainer.ToBuilder()
        {
            return ToTypedBuilder();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IStringComparisonContainerBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.IStringComparisonContainer.ToBuilder()
        {
            return ToTypedBuilder();
        }
    }
    public partial record StringEndsWithCondition : CrossCutting.Utilities.QueryEvaluator.Core.ConditionBase, CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition, CrossCutting.Utilities.QueryEvaluator.Abstractions.IDoubleExpressionContainer, CrossCutting.Utilities.QueryEvaluator.Abstractions.ISingleExpressionContainer, CrossCutting.Utilities.QueryEvaluator.Abstractions.IStringComparisonContainer
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression SecondExpression
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression FirstExpression
        {
            get;
        }

        public System.StringComparison StringComparison
        {
            get;
        }

        public StringEndsWithCondition(System.Nullable<CrossCutting.Utilities.QueryEvaluator.Abstractions.Domains.Combination> combination, bool startGroup, bool endGroup, CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression secondExpression, CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression firstExpression, System.StringComparison stringComparison) : base(combination, startGroup, endGroup)
        {
            this.SecondExpression = secondExpression;
            this.FirstExpression = firstExpression;
            this.StringComparison = stringComparison;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override CrossCutting.Utilities.QueryEvaluator.Core.Builders.ConditionBaseBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public CrossCutting.Utilities.QueryEvaluator.Core.Builders.Conditions.StringEndsWithConditionBuilder ToTypedBuilder()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Core.Builders.Conditions.StringEndsWithConditionBuilder(this);
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition.ToBuilder()
        {
            return ToTypedBuilder();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IDoubleExpressionContainerBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.IDoubleExpressionContainer.ToBuilder()
        {
            return ToTypedBuilder();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISingleExpressionContainerBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.ISingleExpressionContainer.ToBuilder()
        {
            return ToTypedBuilder();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IStringComparisonContainerBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.IStringComparisonContainer.ToBuilder()
        {
            return ToTypedBuilder();
        }
    }
    public partial record StringEqualsCondition : CrossCutting.Utilities.QueryEvaluator.Core.ConditionBase, CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition, CrossCutting.Utilities.QueryEvaluator.Abstractions.IDoubleExpressionContainer, CrossCutting.Utilities.QueryEvaluator.Abstractions.ISingleExpressionContainer, CrossCutting.Utilities.QueryEvaluator.Abstractions.IStringComparisonContainer
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression SecondExpression
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression FirstExpression
        {
            get;
        }

        public System.StringComparison StringComparison
        {
            get;
        }

        public StringEqualsCondition(System.Nullable<CrossCutting.Utilities.QueryEvaluator.Abstractions.Domains.Combination> combination, bool startGroup, bool endGroup, CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression secondExpression, CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression firstExpression, System.StringComparison stringComparison) : base(combination, startGroup, endGroup)
        {
            this.SecondExpression = secondExpression;
            this.FirstExpression = firstExpression;
            this.StringComparison = stringComparison;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override CrossCutting.Utilities.QueryEvaluator.Core.Builders.ConditionBaseBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public CrossCutting.Utilities.QueryEvaluator.Core.Builders.Conditions.StringEqualsConditionBuilder ToTypedBuilder()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Core.Builders.Conditions.StringEqualsConditionBuilder(this);
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition.ToBuilder()
        {
            return ToTypedBuilder();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IDoubleExpressionContainerBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.IDoubleExpressionContainer.ToBuilder()
        {
            return ToTypedBuilder();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISingleExpressionContainerBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.ISingleExpressionContainer.ToBuilder()
        {
            return ToTypedBuilder();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IStringComparisonContainerBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.IStringComparisonContainer.ToBuilder()
        {
            return ToTypedBuilder();
        }
    }
    public partial record StringNotContainsCondition : CrossCutting.Utilities.QueryEvaluator.Core.ConditionBase, CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition, CrossCutting.Utilities.QueryEvaluator.Abstractions.IDoubleExpressionContainer, CrossCutting.Utilities.QueryEvaluator.Abstractions.ISingleExpressionContainer, CrossCutting.Utilities.QueryEvaluator.Abstractions.IStringComparisonContainer
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression SecondExpression
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression FirstExpression
        {
            get;
        }

        public System.StringComparison StringComparison
        {
            get;
        }

        public StringNotContainsCondition(System.Nullable<CrossCutting.Utilities.QueryEvaluator.Abstractions.Domains.Combination> combination, bool startGroup, bool endGroup, CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression secondExpression, CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression firstExpression, System.StringComparison stringComparison) : base(combination, startGroup, endGroup)
        {
            this.SecondExpression = secondExpression;
            this.FirstExpression = firstExpression;
            this.StringComparison = stringComparison;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override CrossCutting.Utilities.QueryEvaluator.Core.Builders.ConditionBaseBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public CrossCutting.Utilities.QueryEvaluator.Core.Builders.Conditions.StringNotContainsConditionBuilder ToTypedBuilder()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Core.Builders.Conditions.StringNotContainsConditionBuilder(this);
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition.ToBuilder()
        {
            return ToTypedBuilder();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IDoubleExpressionContainerBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.IDoubleExpressionContainer.ToBuilder()
        {
            return ToTypedBuilder();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISingleExpressionContainerBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.ISingleExpressionContainer.ToBuilder()
        {
            return ToTypedBuilder();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IStringComparisonContainerBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.IStringComparisonContainer.ToBuilder()
        {
            return ToTypedBuilder();
        }
    }
    public partial record StringNotEndsWithCondition : CrossCutting.Utilities.QueryEvaluator.Core.ConditionBase, CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition, CrossCutting.Utilities.QueryEvaluator.Abstractions.IDoubleExpressionContainer, CrossCutting.Utilities.QueryEvaluator.Abstractions.ISingleExpressionContainer, CrossCutting.Utilities.QueryEvaluator.Abstractions.IStringComparisonContainer
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression SecondExpression
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression FirstExpression
        {
            get;
        }

        public System.StringComparison StringComparison
        {
            get;
        }

        public StringNotEndsWithCondition(System.Nullable<CrossCutting.Utilities.QueryEvaluator.Abstractions.Domains.Combination> combination, bool startGroup, bool endGroup, CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression secondExpression, CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression firstExpression, System.StringComparison stringComparison) : base(combination, startGroup, endGroup)
        {
            this.SecondExpression = secondExpression;
            this.FirstExpression = firstExpression;
            this.StringComparison = stringComparison;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override CrossCutting.Utilities.QueryEvaluator.Core.Builders.ConditionBaseBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public CrossCutting.Utilities.QueryEvaluator.Core.Builders.Conditions.StringNotEndsWithConditionBuilder ToTypedBuilder()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Core.Builders.Conditions.StringNotEndsWithConditionBuilder(this);
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition.ToBuilder()
        {
            return ToTypedBuilder();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IDoubleExpressionContainerBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.IDoubleExpressionContainer.ToBuilder()
        {
            return ToTypedBuilder();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISingleExpressionContainerBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.ISingleExpressionContainer.ToBuilder()
        {
            return ToTypedBuilder();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IStringComparisonContainerBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.IStringComparisonContainer.ToBuilder()
        {
            return ToTypedBuilder();
        }
    }
    public partial record StringNotEqualsCondition : CrossCutting.Utilities.QueryEvaluator.Core.ConditionBase, CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition, CrossCutting.Utilities.QueryEvaluator.Abstractions.IDoubleExpressionContainer, CrossCutting.Utilities.QueryEvaluator.Abstractions.ISingleExpressionContainer, CrossCutting.Utilities.QueryEvaluator.Abstractions.IStringComparisonContainer
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression SecondExpression
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression FirstExpression
        {
            get;
        }

        public System.StringComparison StringComparison
        {
            get;
        }

        public StringNotEqualsCondition(System.Nullable<CrossCutting.Utilities.QueryEvaluator.Abstractions.Domains.Combination> combination, bool startGroup, bool endGroup, CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression secondExpression, CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression firstExpression, System.StringComparison stringComparison) : base(combination, startGroup, endGroup)
        {
            this.SecondExpression = secondExpression;
            this.FirstExpression = firstExpression;
            this.StringComparison = stringComparison;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override CrossCutting.Utilities.QueryEvaluator.Core.Builders.ConditionBaseBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public CrossCutting.Utilities.QueryEvaluator.Core.Builders.Conditions.StringNotEqualsConditionBuilder ToTypedBuilder()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Core.Builders.Conditions.StringNotEqualsConditionBuilder(this);
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition.ToBuilder()
        {
            return ToTypedBuilder();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IDoubleExpressionContainerBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.IDoubleExpressionContainer.ToBuilder()
        {
            return ToTypedBuilder();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISingleExpressionContainerBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.ISingleExpressionContainer.ToBuilder()
        {
            return ToTypedBuilder();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IStringComparisonContainerBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.IStringComparisonContainer.ToBuilder()
        {
            return ToTypedBuilder();
        }
    }
    public partial record StringNotStartsWithCondition : CrossCutting.Utilities.QueryEvaluator.Core.ConditionBase, CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition, CrossCutting.Utilities.QueryEvaluator.Abstractions.IDoubleExpressionContainer, CrossCutting.Utilities.QueryEvaluator.Abstractions.ISingleExpressionContainer, CrossCutting.Utilities.QueryEvaluator.Abstractions.IStringComparisonContainer
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression SecondExpression
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression FirstExpression
        {
            get;
        }

        public System.StringComparison StringComparison
        {
            get;
        }

        public StringNotStartsWithCondition(System.Nullable<CrossCutting.Utilities.QueryEvaluator.Abstractions.Domains.Combination> combination, bool startGroup, bool endGroup, CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression secondExpression, CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression firstExpression, System.StringComparison stringComparison) : base(combination, startGroup, endGroup)
        {
            this.SecondExpression = secondExpression;
            this.FirstExpression = firstExpression;
            this.StringComparison = stringComparison;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override CrossCutting.Utilities.QueryEvaluator.Core.Builders.ConditionBaseBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public CrossCutting.Utilities.QueryEvaluator.Core.Builders.Conditions.StringNotStartsWithConditionBuilder ToTypedBuilder()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Core.Builders.Conditions.StringNotStartsWithConditionBuilder(this);
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition.ToBuilder()
        {
            return ToTypedBuilder();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IDoubleExpressionContainerBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.IDoubleExpressionContainer.ToBuilder()
        {
            return ToTypedBuilder();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISingleExpressionContainerBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.ISingleExpressionContainer.ToBuilder()
        {
            return ToTypedBuilder();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IStringComparisonContainerBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.IStringComparisonContainer.ToBuilder()
        {
            return ToTypedBuilder();
        }
    }
    public partial record StringStartsWithCondition : CrossCutting.Utilities.QueryEvaluator.Core.ConditionBase, CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition, CrossCutting.Utilities.QueryEvaluator.Abstractions.IDoubleExpressionContainer, CrossCutting.Utilities.QueryEvaluator.Abstractions.ISingleExpressionContainer, CrossCutting.Utilities.QueryEvaluator.Abstractions.IStringComparisonContainer
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression SecondExpression
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression FirstExpression
        {
            get;
        }

        public System.StringComparison StringComparison
        {
            get;
        }

        public StringStartsWithCondition(System.Nullable<CrossCutting.Utilities.QueryEvaluator.Abstractions.Domains.Combination> combination, bool startGroup, bool endGroup, CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression secondExpression, CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression firstExpression, System.StringComparison stringComparison) : base(combination, startGroup, endGroup)
        {
            this.SecondExpression = secondExpression;
            this.FirstExpression = firstExpression;
            this.StringComparison = stringComparison;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override CrossCutting.Utilities.QueryEvaluator.Core.Builders.ConditionBaseBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public CrossCutting.Utilities.QueryEvaluator.Core.Builders.Conditions.StringStartsWithConditionBuilder ToTypedBuilder()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Core.Builders.Conditions.StringStartsWithConditionBuilder(this);
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition.ToBuilder()
        {
            return ToTypedBuilder();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IDoubleExpressionContainerBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.IDoubleExpressionContainer.ToBuilder()
        {
            return ToTypedBuilder();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISingleExpressionContainerBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.ISingleExpressionContainer.ToBuilder()
        {
            return ToTypedBuilder();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IStringComparisonContainerBuilder CrossCutting.Utilities.QueryEvaluator.Abstractions.IStringComparisonContainer.ToBuilder()
        {
            return ToTypedBuilder();
        }
    }
}
#nullable disable
