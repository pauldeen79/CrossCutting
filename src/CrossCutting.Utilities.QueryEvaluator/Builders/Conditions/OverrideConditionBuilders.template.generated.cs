// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 9.0.6
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace CrossCutting.Utilities.QueryEvaluator.Builders.Conditions
{
    public partial class ComposableConditionBuilder : ConditionBuilder<ComposableConditionBuilder, CrossCutting.Utilities.QueryEvaluator.Conditions.ComposableCondition>
    {
        private CrossCutting.Utilities.QueryEvaluator.Builders.ExpressionBuilder _leftExpression;

        private CrossCutting.Utilities.QueryEvaluator.Builders.OperatorBuilder _operator;

        private CrossCutting.Utilities.QueryEvaluator.Builders.ExpressionBuilder _rightExpression;

        public CrossCutting.Utilities.QueryEvaluator.Builders.ExpressionBuilder LeftExpression
        {
            get
            {
                return _leftExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<CrossCutting.Utilities.QueryEvaluator.Builders.ExpressionBuilder>.Default.Equals(_leftExpression!, value!);
                _leftExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(LeftExpression));
            }
        }

        public CrossCutting.Utilities.QueryEvaluator.Builders.OperatorBuilder Operator
        {
            get
            {
                return _operator;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<CrossCutting.Utilities.QueryEvaluator.Builders.OperatorBuilder>.Default.Equals(_operator!, value!);
                _operator = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Operator));
            }
        }

        public CrossCutting.Utilities.QueryEvaluator.Builders.ExpressionBuilder RightExpression
        {
            get
            {
                return _rightExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<CrossCutting.Utilities.QueryEvaluator.Builders.ExpressionBuilder>.Default.Equals(_rightExpression!, value!);
                _rightExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(RightExpression));
            }
        }

        public ComposableConditionBuilder(CrossCutting.Utilities.QueryEvaluator.Conditions.ComposableCondition source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _leftExpression = source.LeftExpression?.ToBuilder()!;
            _operator = source.Operator?.ToBuilder()!;
            _rightExpression = source.RightExpression?.ToBuilder()!;
        }

        public ComposableConditionBuilder() : base()
        {
            _leftExpression = default(CrossCutting.Utilities.QueryEvaluator.Builders.ExpressionBuilder)!;
            _operator = default(CrossCutting.Utilities.QueryEvaluator.Builders.OperatorBuilder)!;
            _rightExpression = default(CrossCutting.Utilities.QueryEvaluator.Builders.ExpressionBuilder)!;
            SetDefaultValues();
        }

        public override CrossCutting.Utilities.QueryEvaluator.Conditions.ComposableCondition BuildTyped()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Conditions.ComposableCondition(LeftExpression?.Build()!, Operator?.Build()!, RightExpression?.Build()!, Combination, StartGroup, EndGroup);
        }

        partial void SetDefaultValues();

        public CrossCutting.Utilities.QueryEvaluator.Builders.Conditions.ComposableConditionBuilder WithLeftExpression(CrossCutting.Utilities.QueryEvaluator.Builders.ExpressionBuilder leftExpression)
        {
            if (leftExpression is null) throw new System.ArgumentNullException(nameof(leftExpression));
            LeftExpression = leftExpression;
            return this;
        }

        public CrossCutting.Utilities.QueryEvaluator.Builders.Conditions.ComposableConditionBuilder WithOperator(CrossCutting.Utilities.QueryEvaluator.Builders.OperatorBuilder @operator)
        {
            if (@operator is null) throw new System.ArgumentNullException(nameof(@operator));
            Operator = @operator;
            return this;
        }

        public CrossCutting.Utilities.QueryEvaluator.Builders.Conditions.ComposableConditionBuilder WithRightExpression(CrossCutting.Utilities.QueryEvaluator.Builders.ExpressionBuilder rightExpression)
        {
            if (rightExpression is null) throw new System.ArgumentNullException(nameof(rightExpression));
            RightExpression = rightExpression;
            return this;
        }

        public static implicit operator CrossCutting.Utilities.QueryEvaluator.Conditions.ComposableCondition(ComposableConditionBuilder entity)
        {
            return entity.BuildTyped();
        }
    }
}
#nullable disable
