// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 9.0.9
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace CrossCutting.Utilities.QueryEvaluator.Core.Builders.Conditions
{
    public partial class BetweenConditionBuilder : ConditionBaseBuilder<BetweenConditionBuilder, CrossCutting.Utilities.QueryEvaluator.Core.Conditions.BetweenCondition>, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder
    {
        private CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder _sourceExpression;

        private CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder _lowerBoundExpression;

        private CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder _upperBoundExpression;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder SourceExpression
        {
            get
            {
                return _sourceExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder>.Default.Equals(_sourceExpression!, value!);
                _sourceExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(SourceExpression));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder LowerBoundExpression
        {
            get
            {
                return _lowerBoundExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder>.Default.Equals(_lowerBoundExpression!, value!);
                _lowerBoundExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(LowerBoundExpression));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder UpperBoundExpression
        {
            get
            {
                return _upperBoundExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder>.Default.Equals(_upperBoundExpression!, value!);
                _upperBoundExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(UpperBoundExpression));
            }
        }

        public BetweenConditionBuilder(CrossCutting.Utilities.QueryEvaluator.Core.Conditions.BetweenCondition source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _sourceExpression = source.SourceExpression?.ToBuilder()!;
            _lowerBoundExpression = source.LowerBoundExpression?.ToBuilder()!;
            _upperBoundExpression = source.UpperBoundExpression?.ToBuilder()!;
        }

        public BetweenConditionBuilder() : base()
        {
            _sourceExpression = default(CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder)!;
            _lowerBoundExpression = default(CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder)!;
            _upperBoundExpression = default(CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder)!;
            SetDefaultValues();
        }

        public override CrossCutting.Utilities.QueryEvaluator.Core.Conditions.BetweenCondition BuildTyped()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Core.Conditions.BetweenCondition(SourceExpression?.Build()!, LowerBoundExpression?.Build()!, UpperBoundExpression?.Build()!, Combination, StartGroup, EndGroup);
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder.Build()
        {
            return BuildTyped();
        }

        partial void SetDefaultValues();

        public CrossCutting.Utilities.QueryEvaluator.Core.Builders.Conditions.BetweenConditionBuilder WithSourceExpression(CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder sourceExpression)
        {
            if (sourceExpression is null) throw new System.ArgumentNullException(nameof(sourceExpression));
            SourceExpression = sourceExpression;
            return this;
        }

        public CrossCutting.Utilities.QueryEvaluator.Core.Builders.Conditions.BetweenConditionBuilder WithLowerBoundExpression(CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder lowerBoundExpression)
        {
            if (lowerBoundExpression is null) throw new System.ArgumentNullException(nameof(lowerBoundExpression));
            LowerBoundExpression = lowerBoundExpression;
            return this;
        }

        public CrossCutting.Utilities.QueryEvaluator.Core.Builders.Conditions.BetweenConditionBuilder WithUpperBoundExpression(CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder upperBoundExpression)
        {
            if (upperBoundExpression is null) throw new System.ArgumentNullException(nameof(upperBoundExpression));
            UpperBoundExpression = upperBoundExpression;
            return this;
        }

        public static implicit operator CrossCutting.Utilities.QueryEvaluator.Core.Conditions.BetweenCondition(BetweenConditionBuilder builder)
        {
            return builder.BuildTyped();
        }
    }
    public partial class EqualConditionBuilder : ConditionBaseBuilder<EqualConditionBuilder, CrossCutting.Utilities.QueryEvaluator.Core.Conditions.EqualCondition>, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IDoubleExpressionContainerBuilder, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISingleExpressionContainerBuilder
    {
        private CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder _compareExpression;

        private CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder _sourceExpression;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder CompareExpression
        {
            get
            {
                return _compareExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder>.Default.Equals(_compareExpression!, value!);
                _compareExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(CompareExpression));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder SourceExpression
        {
            get
            {
                return _sourceExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder>.Default.Equals(_sourceExpression!, value!);
                _sourceExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(SourceExpression));
            }
        }

        public EqualConditionBuilder(CrossCutting.Utilities.QueryEvaluator.Core.Conditions.EqualCondition source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _compareExpression = source.CompareExpression?.ToBuilder()!;
            _sourceExpression = source.SourceExpression?.ToBuilder()!;
        }

        public EqualConditionBuilder() : base()
        {
            _compareExpression = default(CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder)!;
            _sourceExpression = default(CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder)!;
            SetDefaultValues();
        }

        public override CrossCutting.Utilities.QueryEvaluator.Core.Conditions.EqualCondition BuildTyped()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Core.Conditions.EqualCondition(Combination, StartGroup, EndGroup, CompareExpression?.Build()!, SourceExpression?.Build()!);
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder.Build()
        {
            return BuildTyped();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.IDoubleExpressionContainer CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IDoubleExpressionContainerBuilder.Build()
        {
            return BuildTyped();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.ISingleExpressionContainer CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISingleExpressionContainerBuilder.Build()
        {
            return BuildTyped();
        }

        partial void SetDefaultValues();

        public static implicit operator CrossCutting.Utilities.QueryEvaluator.Core.Conditions.EqualCondition(EqualConditionBuilder builder)
        {
            return builder.BuildTyped();
        }
    }
    public partial class GreaterThanConditionBuilder : ConditionBaseBuilder<GreaterThanConditionBuilder, CrossCutting.Utilities.QueryEvaluator.Core.Conditions.GreaterThanCondition>, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IDoubleExpressionContainerBuilder, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISingleExpressionContainerBuilder
    {
        private CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder _compareExpression;

        private CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder _sourceExpression;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder CompareExpression
        {
            get
            {
                return _compareExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder>.Default.Equals(_compareExpression!, value!);
                _compareExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(CompareExpression));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder SourceExpression
        {
            get
            {
                return _sourceExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder>.Default.Equals(_sourceExpression!, value!);
                _sourceExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(SourceExpression));
            }
        }

        public GreaterThanConditionBuilder(CrossCutting.Utilities.QueryEvaluator.Core.Conditions.GreaterThanCondition source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _compareExpression = source.CompareExpression?.ToBuilder()!;
            _sourceExpression = source.SourceExpression?.ToBuilder()!;
        }

        public GreaterThanConditionBuilder() : base()
        {
            _compareExpression = default(CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder)!;
            _sourceExpression = default(CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder)!;
            SetDefaultValues();
        }

        public override CrossCutting.Utilities.QueryEvaluator.Core.Conditions.GreaterThanCondition BuildTyped()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Core.Conditions.GreaterThanCondition(Combination, StartGroup, EndGroup, CompareExpression?.Build()!, SourceExpression?.Build()!);
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder.Build()
        {
            return BuildTyped();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.IDoubleExpressionContainer CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IDoubleExpressionContainerBuilder.Build()
        {
            return BuildTyped();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.ISingleExpressionContainer CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISingleExpressionContainerBuilder.Build()
        {
            return BuildTyped();
        }

        partial void SetDefaultValues();

        public static implicit operator CrossCutting.Utilities.QueryEvaluator.Core.Conditions.GreaterThanCondition(GreaterThanConditionBuilder builder)
        {
            return builder.BuildTyped();
        }
    }
    public partial class GreaterThanOrEqualConditionBuilder : ConditionBaseBuilder<GreaterThanOrEqualConditionBuilder, CrossCutting.Utilities.QueryEvaluator.Core.Conditions.GreaterThanOrEqualCondition>, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IDoubleExpressionContainerBuilder, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISingleExpressionContainerBuilder
    {
        private CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder _compareExpression;

        private CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder _sourceExpression;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder CompareExpression
        {
            get
            {
                return _compareExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder>.Default.Equals(_compareExpression!, value!);
                _compareExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(CompareExpression));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder SourceExpression
        {
            get
            {
                return _sourceExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder>.Default.Equals(_sourceExpression!, value!);
                _sourceExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(SourceExpression));
            }
        }

        public GreaterThanOrEqualConditionBuilder(CrossCutting.Utilities.QueryEvaluator.Core.Conditions.GreaterThanOrEqualCondition source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _compareExpression = source.CompareExpression?.ToBuilder()!;
            _sourceExpression = source.SourceExpression?.ToBuilder()!;
        }

        public GreaterThanOrEqualConditionBuilder() : base()
        {
            _compareExpression = default(CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder)!;
            _sourceExpression = default(CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder)!;
            SetDefaultValues();
        }

        public override CrossCutting.Utilities.QueryEvaluator.Core.Conditions.GreaterThanOrEqualCondition BuildTyped()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Core.Conditions.GreaterThanOrEqualCondition(Combination, StartGroup, EndGroup, CompareExpression?.Build()!, SourceExpression?.Build()!);
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder.Build()
        {
            return BuildTyped();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.IDoubleExpressionContainer CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IDoubleExpressionContainerBuilder.Build()
        {
            return BuildTyped();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.ISingleExpressionContainer CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISingleExpressionContainerBuilder.Build()
        {
            return BuildTyped();
        }

        partial void SetDefaultValues();

        public static implicit operator CrossCutting.Utilities.QueryEvaluator.Core.Conditions.GreaterThanOrEqualCondition(GreaterThanOrEqualConditionBuilder builder)
        {
            return builder.BuildTyped();
        }
    }
    public partial class InConditionBuilder : ConditionBaseBuilder<InConditionBuilder, CrossCutting.Utilities.QueryEvaluator.Core.Conditions.InCondition>, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IInConditionBuilder
    {
        private CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder _sourceExpression;

        private System.Collections.Generic.List<CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder> _compareExpressions;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder SourceExpression
        {
            get
            {
                return _sourceExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder>.Default.Equals(_sourceExpression!, value!);
                _sourceExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(SourceExpression));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.Generic.List<CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder> CompareExpressions
        {
            get
            {
                return _compareExpressions;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder>>.Default.Equals(_compareExpressions!, value!);
                _compareExpressions = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(CompareExpressions));
            }
        }

        public InConditionBuilder(CrossCutting.Utilities.QueryEvaluator.Core.Conditions.InCondition source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _compareExpressions = new System.Collections.Generic.List<CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder>();
            _sourceExpression = source.SourceExpression?.ToBuilder()!;
            if (source.CompareExpressions is not null) foreach (var item in source.CompareExpressions.Select(x => x.ToBuilder())) _compareExpressions.Add(item);
        }

        public InConditionBuilder() : base()
        {
            _compareExpressions = new System.Collections.Generic.List<CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder>();
            _sourceExpression = default(CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder)!;
            SetDefaultValues();
        }

        public override CrossCutting.Utilities.QueryEvaluator.Core.Conditions.InCondition BuildTyped()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Core.Conditions.InCondition(Combination, StartGroup, EndGroup, SourceExpression?.Build()!, CompareExpressions.Select(x => x.Build()!).ToList().AsReadOnly());
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder.Build()
        {
            return BuildTyped();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.IInCondition CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IInConditionBuilder.Build()
        {
            return BuildTyped();
        }

        partial void SetDefaultValues();

        public static implicit operator CrossCutting.Utilities.QueryEvaluator.Core.Conditions.InCondition(InConditionBuilder builder)
        {
            return builder.BuildTyped();
        }
    }
    public partial class NotEqualConditionBuilder : ConditionBaseBuilder<NotEqualConditionBuilder, CrossCutting.Utilities.QueryEvaluator.Core.Conditions.NotEqualCondition>, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IDoubleExpressionContainerBuilder, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISingleExpressionContainerBuilder
    {
        private CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder _compareExpression;

        private CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder _sourceExpression;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder CompareExpression
        {
            get
            {
                return _compareExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder>.Default.Equals(_compareExpression!, value!);
                _compareExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(CompareExpression));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder SourceExpression
        {
            get
            {
                return _sourceExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder>.Default.Equals(_sourceExpression!, value!);
                _sourceExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(SourceExpression));
            }
        }

        public NotEqualConditionBuilder(CrossCutting.Utilities.QueryEvaluator.Core.Conditions.NotEqualCondition source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _compareExpression = source.CompareExpression?.ToBuilder()!;
            _sourceExpression = source.SourceExpression?.ToBuilder()!;
        }

        public NotEqualConditionBuilder() : base()
        {
            _compareExpression = default(CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder)!;
            _sourceExpression = default(CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder)!;
            SetDefaultValues();
        }

        public override CrossCutting.Utilities.QueryEvaluator.Core.Conditions.NotEqualCondition BuildTyped()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Core.Conditions.NotEqualCondition(Combination, StartGroup, EndGroup, CompareExpression?.Build()!, SourceExpression?.Build()!);
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder.Build()
        {
            return BuildTyped();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.IDoubleExpressionContainer CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IDoubleExpressionContainerBuilder.Build()
        {
            return BuildTyped();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.ISingleExpressionContainer CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISingleExpressionContainerBuilder.Build()
        {
            return BuildTyped();
        }

        partial void SetDefaultValues();

        public static implicit operator CrossCutting.Utilities.QueryEvaluator.Core.Conditions.NotEqualCondition(NotEqualConditionBuilder builder)
        {
            return builder.BuildTyped();
        }
    }
    public partial class NotInConditionBuilder : ConditionBaseBuilder<NotInConditionBuilder, CrossCutting.Utilities.QueryEvaluator.Core.Conditions.NotInCondition>, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IInConditionBuilder
    {
        private CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder _sourceExpression;

        private System.Collections.Generic.List<CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder> _compareExpressions;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder SourceExpression
        {
            get
            {
                return _sourceExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder>.Default.Equals(_sourceExpression!, value!);
                _sourceExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(SourceExpression));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.Generic.List<CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder> CompareExpressions
        {
            get
            {
                return _compareExpressions;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder>>.Default.Equals(_compareExpressions!, value!);
                _compareExpressions = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(CompareExpressions));
            }
        }

        public NotInConditionBuilder(CrossCutting.Utilities.QueryEvaluator.Core.Conditions.NotInCondition source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _compareExpressions = new System.Collections.Generic.List<CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder>();
            _sourceExpression = source.SourceExpression?.ToBuilder()!;
            if (source.CompareExpressions is not null) foreach (var item in source.CompareExpressions.Select(x => x.ToBuilder())) _compareExpressions.Add(item);
        }

        public NotInConditionBuilder() : base()
        {
            _compareExpressions = new System.Collections.Generic.List<CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder>();
            _sourceExpression = default(CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder)!;
            SetDefaultValues();
        }

        public override CrossCutting.Utilities.QueryEvaluator.Core.Conditions.NotInCondition BuildTyped()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Core.Conditions.NotInCondition(Combination, StartGroup, EndGroup, SourceExpression?.Build()!, CompareExpressions.Select(x => x.Build()!).ToList().AsReadOnly());
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder.Build()
        {
            return BuildTyped();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.IInCondition CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IInConditionBuilder.Build()
        {
            return BuildTyped();
        }

        partial void SetDefaultValues();

        public static implicit operator CrossCutting.Utilities.QueryEvaluator.Core.Conditions.NotInCondition(NotInConditionBuilder builder)
        {
            return builder.BuildTyped();
        }
    }
    public partial class NotNullConditionBuilder : ConditionBaseBuilder<NotNullConditionBuilder, CrossCutting.Utilities.QueryEvaluator.Core.Conditions.NotNullCondition>, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISingleExpressionContainerBuilder
    {
        private CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder _sourceExpression;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder SourceExpression
        {
            get
            {
                return _sourceExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder>.Default.Equals(_sourceExpression!, value!);
                _sourceExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(SourceExpression));
            }
        }

        public NotNullConditionBuilder(CrossCutting.Utilities.QueryEvaluator.Core.Conditions.NotNullCondition source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _sourceExpression = source.SourceExpression?.ToBuilder()!;
        }

        public NotNullConditionBuilder() : base()
        {
            _sourceExpression = default(CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder)!;
            SetDefaultValues();
        }

        public override CrossCutting.Utilities.QueryEvaluator.Core.Conditions.NotNullCondition BuildTyped()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Core.Conditions.NotNullCondition(Combination, StartGroup, EndGroup, SourceExpression?.Build()!);
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder.Build()
        {
            return BuildTyped();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.ISingleExpressionContainer CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISingleExpressionContainerBuilder.Build()
        {
            return BuildTyped();
        }

        partial void SetDefaultValues();

        public static implicit operator CrossCutting.Utilities.QueryEvaluator.Core.Conditions.NotNullCondition(NotNullConditionBuilder builder)
        {
            return builder.BuildTyped();
        }
    }
    public partial class NullConditionBuilder : ConditionBaseBuilder<NullConditionBuilder, CrossCutting.Utilities.QueryEvaluator.Core.Conditions.NullCondition>, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISingleExpressionContainerBuilder
    {
        private CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder _sourceExpression;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder SourceExpression
        {
            get
            {
                return _sourceExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder>.Default.Equals(_sourceExpression!, value!);
                _sourceExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(SourceExpression));
            }
        }

        public NullConditionBuilder(CrossCutting.Utilities.QueryEvaluator.Core.Conditions.NullCondition source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _sourceExpression = source.SourceExpression?.ToBuilder()!;
        }

        public NullConditionBuilder() : base()
        {
            _sourceExpression = default(CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder)!;
            SetDefaultValues();
        }

        public override CrossCutting.Utilities.QueryEvaluator.Core.Conditions.NullCondition BuildTyped()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Core.Conditions.NullCondition(Combination, StartGroup, EndGroup, SourceExpression?.Build()!);
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder.Build()
        {
            return BuildTyped();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.ISingleExpressionContainer CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISingleExpressionContainerBuilder.Build()
        {
            return BuildTyped();
        }

        partial void SetDefaultValues();

        public static implicit operator CrossCutting.Utilities.QueryEvaluator.Core.Conditions.NullCondition(NullConditionBuilder builder)
        {
            return builder.BuildTyped();
        }
    }
    public partial class SmallerThanConditionBuilder : ConditionBaseBuilder<SmallerThanConditionBuilder, CrossCutting.Utilities.QueryEvaluator.Core.Conditions.SmallerThanCondition>, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IDoubleExpressionContainerBuilder, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISingleExpressionContainerBuilder
    {
        private CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder _compareExpression;

        private CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder _sourceExpression;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder CompareExpression
        {
            get
            {
                return _compareExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder>.Default.Equals(_compareExpression!, value!);
                _compareExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(CompareExpression));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder SourceExpression
        {
            get
            {
                return _sourceExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder>.Default.Equals(_sourceExpression!, value!);
                _sourceExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(SourceExpression));
            }
        }

        public SmallerThanConditionBuilder(CrossCutting.Utilities.QueryEvaluator.Core.Conditions.SmallerThanCondition source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _compareExpression = source.CompareExpression?.ToBuilder()!;
            _sourceExpression = source.SourceExpression?.ToBuilder()!;
        }

        public SmallerThanConditionBuilder() : base()
        {
            _compareExpression = default(CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder)!;
            _sourceExpression = default(CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder)!;
            SetDefaultValues();
        }

        public override CrossCutting.Utilities.QueryEvaluator.Core.Conditions.SmallerThanCondition BuildTyped()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Core.Conditions.SmallerThanCondition(Combination, StartGroup, EndGroup, CompareExpression?.Build()!, SourceExpression?.Build()!);
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder.Build()
        {
            return BuildTyped();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.IDoubleExpressionContainer CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IDoubleExpressionContainerBuilder.Build()
        {
            return BuildTyped();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.ISingleExpressionContainer CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISingleExpressionContainerBuilder.Build()
        {
            return BuildTyped();
        }

        partial void SetDefaultValues();

        public static implicit operator CrossCutting.Utilities.QueryEvaluator.Core.Conditions.SmallerThanCondition(SmallerThanConditionBuilder builder)
        {
            return builder.BuildTyped();
        }
    }
    public partial class SmallerThanOrEqualConditionBuilder : ConditionBaseBuilder<SmallerThanOrEqualConditionBuilder, CrossCutting.Utilities.QueryEvaluator.Core.Conditions.SmallerThanOrEqualCondition>, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IDoubleExpressionContainerBuilder, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISingleExpressionContainerBuilder
    {
        private CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder _compareExpression;

        private CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder _sourceExpression;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder CompareExpression
        {
            get
            {
                return _compareExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder>.Default.Equals(_compareExpression!, value!);
                _compareExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(CompareExpression));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder SourceExpression
        {
            get
            {
                return _sourceExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder>.Default.Equals(_sourceExpression!, value!);
                _sourceExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(SourceExpression));
            }
        }

        public SmallerThanOrEqualConditionBuilder(CrossCutting.Utilities.QueryEvaluator.Core.Conditions.SmallerThanOrEqualCondition source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _compareExpression = source.CompareExpression?.ToBuilder()!;
            _sourceExpression = source.SourceExpression?.ToBuilder()!;
        }

        public SmallerThanOrEqualConditionBuilder() : base()
        {
            _compareExpression = default(CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder)!;
            _sourceExpression = default(CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder)!;
            SetDefaultValues();
        }

        public override CrossCutting.Utilities.QueryEvaluator.Core.Conditions.SmallerThanOrEqualCondition BuildTyped()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Core.Conditions.SmallerThanOrEqualCondition(Combination, StartGroup, EndGroup, CompareExpression?.Build()!, SourceExpression?.Build()!);
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder.Build()
        {
            return BuildTyped();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.IDoubleExpressionContainer CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IDoubleExpressionContainerBuilder.Build()
        {
            return BuildTyped();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.ISingleExpressionContainer CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISingleExpressionContainerBuilder.Build()
        {
            return BuildTyped();
        }

        partial void SetDefaultValues();

        public static implicit operator CrossCutting.Utilities.QueryEvaluator.Core.Conditions.SmallerThanOrEqualCondition(SmallerThanOrEqualConditionBuilder builder)
        {
            return builder.BuildTyped();
        }
    }
    public partial class StringContainsConditionBuilder : ConditionBaseBuilder<StringContainsConditionBuilder, CrossCutting.Utilities.QueryEvaluator.Core.Conditions.StringContainsCondition>, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IDoubleExpressionContainerBuilder, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISingleExpressionContainerBuilder, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IStringComparisonContainerBuilder
    {
        private CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder _compareExpression;

        private CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder _sourceExpression;

        private System.StringComparison _stringComparison;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder CompareExpression
        {
            get
            {
                return _compareExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder>.Default.Equals(_compareExpression!, value!);
                _compareExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(CompareExpression));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder SourceExpression
        {
            get
            {
                return _sourceExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder>.Default.Equals(_sourceExpression!, value!);
                _sourceExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(SourceExpression));
            }
        }

        public System.StringComparison StringComparison
        {
            get
            {
                return _stringComparison;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.StringComparison>.Default.Equals(_stringComparison, value);
                _stringComparison = value;
                if (hasChanged) HandlePropertyChanged(nameof(StringComparison));
            }
        }

        public StringContainsConditionBuilder(CrossCutting.Utilities.QueryEvaluator.Core.Conditions.StringContainsCondition source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _compareExpression = source.CompareExpression?.ToBuilder()!;
            _sourceExpression = source.SourceExpression?.ToBuilder()!;
            _stringComparison = source.StringComparison;
        }

        public StringContainsConditionBuilder() : base()
        {
            _compareExpression = default(CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder)!;
            _sourceExpression = default(CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder)!;
            SetDefaultValues();
        }

        public override CrossCutting.Utilities.QueryEvaluator.Core.Conditions.StringContainsCondition BuildTyped()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Core.Conditions.StringContainsCondition(Combination, StartGroup, EndGroup, CompareExpression?.Build()!, SourceExpression?.Build()!, StringComparison);
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder.Build()
        {
            return BuildTyped();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.IDoubleExpressionContainer CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IDoubleExpressionContainerBuilder.Build()
        {
            return BuildTyped();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.ISingleExpressionContainer CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISingleExpressionContainerBuilder.Build()
        {
            return BuildTyped();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.IStringComparisonContainer CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IStringComparisonContainerBuilder.Build()
        {
            return BuildTyped();
        }

        partial void SetDefaultValues();

        public static implicit operator CrossCutting.Utilities.QueryEvaluator.Core.Conditions.StringContainsCondition(StringContainsConditionBuilder builder)
        {
            return builder.BuildTyped();
        }
    }
    public partial class StringEndsWithConditionBuilder : ConditionBaseBuilder<StringEndsWithConditionBuilder, CrossCutting.Utilities.QueryEvaluator.Core.Conditions.StringEndsWithCondition>, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IDoubleExpressionContainerBuilder, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISingleExpressionContainerBuilder, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IStringComparisonContainerBuilder
    {
        private CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder _compareExpression;

        private CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder _sourceExpression;

        private System.StringComparison _stringComparison;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder CompareExpression
        {
            get
            {
                return _compareExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder>.Default.Equals(_compareExpression!, value!);
                _compareExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(CompareExpression));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder SourceExpression
        {
            get
            {
                return _sourceExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder>.Default.Equals(_sourceExpression!, value!);
                _sourceExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(SourceExpression));
            }
        }

        public System.StringComparison StringComparison
        {
            get
            {
                return _stringComparison;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.StringComparison>.Default.Equals(_stringComparison, value);
                _stringComparison = value;
                if (hasChanged) HandlePropertyChanged(nameof(StringComparison));
            }
        }

        public StringEndsWithConditionBuilder(CrossCutting.Utilities.QueryEvaluator.Core.Conditions.StringEndsWithCondition source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _compareExpression = source.CompareExpression?.ToBuilder()!;
            _sourceExpression = source.SourceExpression?.ToBuilder()!;
            _stringComparison = source.StringComparison;
        }

        public StringEndsWithConditionBuilder() : base()
        {
            _compareExpression = default(CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder)!;
            _sourceExpression = default(CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder)!;
            SetDefaultValues();
        }

        public override CrossCutting.Utilities.QueryEvaluator.Core.Conditions.StringEndsWithCondition BuildTyped()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Core.Conditions.StringEndsWithCondition(Combination, StartGroup, EndGroup, CompareExpression?.Build()!, SourceExpression?.Build()!, StringComparison);
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder.Build()
        {
            return BuildTyped();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.IDoubleExpressionContainer CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IDoubleExpressionContainerBuilder.Build()
        {
            return BuildTyped();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.ISingleExpressionContainer CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISingleExpressionContainerBuilder.Build()
        {
            return BuildTyped();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.IStringComparisonContainer CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IStringComparisonContainerBuilder.Build()
        {
            return BuildTyped();
        }

        partial void SetDefaultValues();

        public static implicit operator CrossCutting.Utilities.QueryEvaluator.Core.Conditions.StringEndsWithCondition(StringEndsWithConditionBuilder builder)
        {
            return builder.BuildTyped();
        }
    }
    public partial class StringEqualsConditionBuilder : ConditionBaseBuilder<StringEqualsConditionBuilder, CrossCutting.Utilities.QueryEvaluator.Core.Conditions.StringEqualsCondition>, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IDoubleExpressionContainerBuilder, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISingleExpressionContainerBuilder, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IStringComparisonContainerBuilder
    {
        private CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder _compareExpression;

        private CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder _sourceExpression;

        private System.StringComparison _stringComparison;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder CompareExpression
        {
            get
            {
                return _compareExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder>.Default.Equals(_compareExpression!, value!);
                _compareExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(CompareExpression));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder SourceExpression
        {
            get
            {
                return _sourceExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder>.Default.Equals(_sourceExpression!, value!);
                _sourceExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(SourceExpression));
            }
        }

        public System.StringComparison StringComparison
        {
            get
            {
                return _stringComparison;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.StringComparison>.Default.Equals(_stringComparison, value);
                _stringComparison = value;
                if (hasChanged) HandlePropertyChanged(nameof(StringComparison));
            }
        }

        public StringEqualsConditionBuilder(CrossCutting.Utilities.QueryEvaluator.Core.Conditions.StringEqualsCondition source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _compareExpression = source.CompareExpression?.ToBuilder()!;
            _sourceExpression = source.SourceExpression?.ToBuilder()!;
            _stringComparison = source.StringComparison;
        }

        public StringEqualsConditionBuilder() : base()
        {
            _compareExpression = default(CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder)!;
            _sourceExpression = default(CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder)!;
            SetDefaultValues();
        }

        public override CrossCutting.Utilities.QueryEvaluator.Core.Conditions.StringEqualsCondition BuildTyped()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Core.Conditions.StringEqualsCondition(Combination, StartGroup, EndGroup, CompareExpression?.Build()!, SourceExpression?.Build()!, StringComparison);
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder.Build()
        {
            return BuildTyped();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.IDoubleExpressionContainer CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IDoubleExpressionContainerBuilder.Build()
        {
            return BuildTyped();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.ISingleExpressionContainer CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISingleExpressionContainerBuilder.Build()
        {
            return BuildTyped();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.IStringComparisonContainer CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IStringComparisonContainerBuilder.Build()
        {
            return BuildTyped();
        }

        partial void SetDefaultValues();

        public static implicit operator CrossCutting.Utilities.QueryEvaluator.Core.Conditions.StringEqualsCondition(StringEqualsConditionBuilder builder)
        {
            return builder.BuildTyped();
        }
    }
    public partial class StringNotContainsConditionBuilder : ConditionBaseBuilder<StringNotContainsConditionBuilder, CrossCutting.Utilities.QueryEvaluator.Core.Conditions.StringNotContainsCondition>, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IDoubleExpressionContainerBuilder, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISingleExpressionContainerBuilder, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IStringComparisonContainerBuilder
    {
        private CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder _compareExpression;

        private CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder _sourceExpression;

        private System.StringComparison _stringComparison;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder CompareExpression
        {
            get
            {
                return _compareExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder>.Default.Equals(_compareExpression!, value!);
                _compareExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(CompareExpression));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder SourceExpression
        {
            get
            {
                return _sourceExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder>.Default.Equals(_sourceExpression!, value!);
                _sourceExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(SourceExpression));
            }
        }

        public System.StringComparison StringComparison
        {
            get
            {
                return _stringComparison;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.StringComparison>.Default.Equals(_stringComparison, value);
                _stringComparison = value;
                if (hasChanged) HandlePropertyChanged(nameof(StringComparison));
            }
        }

        public StringNotContainsConditionBuilder(CrossCutting.Utilities.QueryEvaluator.Core.Conditions.StringNotContainsCondition source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _compareExpression = source.CompareExpression?.ToBuilder()!;
            _sourceExpression = source.SourceExpression?.ToBuilder()!;
            _stringComparison = source.StringComparison;
        }

        public StringNotContainsConditionBuilder() : base()
        {
            _compareExpression = default(CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder)!;
            _sourceExpression = default(CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder)!;
            SetDefaultValues();
        }

        public override CrossCutting.Utilities.QueryEvaluator.Core.Conditions.StringNotContainsCondition BuildTyped()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Core.Conditions.StringNotContainsCondition(Combination, StartGroup, EndGroup, CompareExpression?.Build()!, SourceExpression?.Build()!, StringComparison);
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder.Build()
        {
            return BuildTyped();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.IDoubleExpressionContainer CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IDoubleExpressionContainerBuilder.Build()
        {
            return BuildTyped();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.ISingleExpressionContainer CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISingleExpressionContainerBuilder.Build()
        {
            return BuildTyped();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.IStringComparisonContainer CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IStringComparisonContainerBuilder.Build()
        {
            return BuildTyped();
        }

        partial void SetDefaultValues();

        public static implicit operator CrossCutting.Utilities.QueryEvaluator.Core.Conditions.StringNotContainsCondition(StringNotContainsConditionBuilder builder)
        {
            return builder.BuildTyped();
        }
    }
    public partial class StringNotEndsWithConditionBuilder : ConditionBaseBuilder<StringNotEndsWithConditionBuilder, CrossCutting.Utilities.QueryEvaluator.Core.Conditions.StringNotEndsWithCondition>, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IDoubleExpressionContainerBuilder, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISingleExpressionContainerBuilder, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IStringComparisonContainerBuilder
    {
        private CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder _compareExpression;

        private CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder _sourceExpression;

        private System.StringComparison _stringComparison;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder CompareExpression
        {
            get
            {
                return _compareExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder>.Default.Equals(_compareExpression!, value!);
                _compareExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(CompareExpression));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder SourceExpression
        {
            get
            {
                return _sourceExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder>.Default.Equals(_sourceExpression!, value!);
                _sourceExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(SourceExpression));
            }
        }

        public System.StringComparison StringComparison
        {
            get
            {
                return _stringComparison;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.StringComparison>.Default.Equals(_stringComparison, value);
                _stringComparison = value;
                if (hasChanged) HandlePropertyChanged(nameof(StringComparison));
            }
        }

        public StringNotEndsWithConditionBuilder(CrossCutting.Utilities.QueryEvaluator.Core.Conditions.StringNotEndsWithCondition source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _compareExpression = source.CompareExpression?.ToBuilder()!;
            _sourceExpression = source.SourceExpression?.ToBuilder()!;
            _stringComparison = source.StringComparison;
        }

        public StringNotEndsWithConditionBuilder() : base()
        {
            _compareExpression = default(CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder)!;
            _sourceExpression = default(CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder)!;
            SetDefaultValues();
        }

        public override CrossCutting.Utilities.QueryEvaluator.Core.Conditions.StringNotEndsWithCondition BuildTyped()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Core.Conditions.StringNotEndsWithCondition(Combination, StartGroup, EndGroup, CompareExpression?.Build()!, SourceExpression?.Build()!, StringComparison);
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder.Build()
        {
            return BuildTyped();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.IDoubleExpressionContainer CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IDoubleExpressionContainerBuilder.Build()
        {
            return BuildTyped();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.ISingleExpressionContainer CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISingleExpressionContainerBuilder.Build()
        {
            return BuildTyped();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.IStringComparisonContainer CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IStringComparisonContainerBuilder.Build()
        {
            return BuildTyped();
        }

        partial void SetDefaultValues();

        public static implicit operator CrossCutting.Utilities.QueryEvaluator.Core.Conditions.StringNotEndsWithCondition(StringNotEndsWithConditionBuilder builder)
        {
            return builder.BuildTyped();
        }
    }
    public partial class StringNotEqualsConditionBuilder : ConditionBaseBuilder<StringNotEqualsConditionBuilder, CrossCutting.Utilities.QueryEvaluator.Core.Conditions.StringNotEqualsCondition>, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IDoubleExpressionContainerBuilder, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISingleExpressionContainerBuilder, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IStringComparisonContainerBuilder
    {
        private CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder _compareExpression;

        private CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder _sourceExpression;

        private System.StringComparison _stringComparison;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder CompareExpression
        {
            get
            {
                return _compareExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder>.Default.Equals(_compareExpression!, value!);
                _compareExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(CompareExpression));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder SourceExpression
        {
            get
            {
                return _sourceExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder>.Default.Equals(_sourceExpression!, value!);
                _sourceExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(SourceExpression));
            }
        }

        public System.StringComparison StringComparison
        {
            get
            {
                return _stringComparison;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.StringComparison>.Default.Equals(_stringComparison, value);
                _stringComparison = value;
                if (hasChanged) HandlePropertyChanged(nameof(StringComparison));
            }
        }

        public StringNotEqualsConditionBuilder(CrossCutting.Utilities.QueryEvaluator.Core.Conditions.StringNotEqualsCondition source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _compareExpression = source.CompareExpression?.ToBuilder()!;
            _sourceExpression = source.SourceExpression?.ToBuilder()!;
            _stringComparison = source.StringComparison;
        }

        public StringNotEqualsConditionBuilder() : base()
        {
            _compareExpression = default(CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder)!;
            _sourceExpression = default(CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder)!;
            SetDefaultValues();
        }

        public override CrossCutting.Utilities.QueryEvaluator.Core.Conditions.StringNotEqualsCondition BuildTyped()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Core.Conditions.StringNotEqualsCondition(Combination, StartGroup, EndGroup, CompareExpression?.Build()!, SourceExpression?.Build()!, StringComparison);
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder.Build()
        {
            return BuildTyped();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.IDoubleExpressionContainer CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IDoubleExpressionContainerBuilder.Build()
        {
            return BuildTyped();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.ISingleExpressionContainer CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISingleExpressionContainerBuilder.Build()
        {
            return BuildTyped();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.IStringComparisonContainer CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IStringComparisonContainerBuilder.Build()
        {
            return BuildTyped();
        }

        partial void SetDefaultValues();

        public static implicit operator CrossCutting.Utilities.QueryEvaluator.Core.Conditions.StringNotEqualsCondition(StringNotEqualsConditionBuilder builder)
        {
            return builder.BuildTyped();
        }
    }
    public partial class StringNotStartsWithConditionBuilder : ConditionBaseBuilder<StringNotStartsWithConditionBuilder, CrossCutting.Utilities.QueryEvaluator.Core.Conditions.StringNotStartsWithCondition>, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IDoubleExpressionContainerBuilder, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISingleExpressionContainerBuilder, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IStringComparisonContainerBuilder
    {
        private CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder _compareExpression;

        private CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder _sourceExpression;

        private System.StringComparison _stringComparison;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder CompareExpression
        {
            get
            {
                return _compareExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder>.Default.Equals(_compareExpression!, value!);
                _compareExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(CompareExpression));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder SourceExpression
        {
            get
            {
                return _sourceExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder>.Default.Equals(_sourceExpression!, value!);
                _sourceExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(SourceExpression));
            }
        }

        public System.StringComparison StringComparison
        {
            get
            {
                return _stringComparison;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.StringComparison>.Default.Equals(_stringComparison, value);
                _stringComparison = value;
                if (hasChanged) HandlePropertyChanged(nameof(StringComparison));
            }
        }

        public StringNotStartsWithConditionBuilder(CrossCutting.Utilities.QueryEvaluator.Core.Conditions.StringNotStartsWithCondition source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _compareExpression = source.CompareExpression?.ToBuilder()!;
            _sourceExpression = source.SourceExpression?.ToBuilder()!;
            _stringComparison = source.StringComparison;
        }

        public StringNotStartsWithConditionBuilder() : base()
        {
            _compareExpression = default(CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder)!;
            _sourceExpression = default(CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder)!;
            SetDefaultValues();
        }

        public override CrossCutting.Utilities.QueryEvaluator.Core.Conditions.StringNotStartsWithCondition BuildTyped()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Core.Conditions.StringNotStartsWithCondition(Combination, StartGroup, EndGroup, CompareExpression?.Build()!, SourceExpression?.Build()!, StringComparison);
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder.Build()
        {
            return BuildTyped();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.IDoubleExpressionContainer CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IDoubleExpressionContainerBuilder.Build()
        {
            return BuildTyped();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.ISingleExpressionContainer CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISingleExpressionContainerBuilder.Build()
        {
            return BuildTyped();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.IStringComparisonContainer CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IStringComparisonContainerBuilder.Build()
        {
            return BuildTyped();
        }

        partial void SetDefaultValues();

        public static implicit operator CrossCutting.Utilities.QueryEvaluator.Core.Conditions.StringNotStartsWithCondition(StringNotStartsWithConditionBuilder builder)
        {
            return builder.BuildTyped();
        }
    }
    public partial class StringStartsWithConditionBuilder : ConditionBaseBuilder<StringStartsWithConditionBuilder, CrossCutting.Utilities.QueryEvaluator.Core.Conditions.StringStartsWithCondition>, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IDoubleExpressionContainerBuilder, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISingleExpressionContainerBuilder, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IStringComparisonContainerBuilder
    {
        private CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder _compareExpression;

        private CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder _sourceExpression;

        private System.StringComparison _stringComparison;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder CompareExpression
        {
            get
            {
                return _compareExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder>.Default.Equals(_compareExpression!, value!);
                _compareExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(CompareExpression));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder SourceExpression
        {
            get
            {
                return _sourceExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder>.Default.Equals(_sourceExpression!, value!);
                _sourceExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(SourceExpression));
            }
        }

        public System.StringComparison StringComparison
        {
            get
            {
                return _stringComparison;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.StringComparison>.Default.Equals(_stringComparison, value);
                _stringComparison = value;
                if (hasChanged) HandlePropertyChanged(nameof(StringComparison));
            }
        }

        public StringStartsWithConditionBuilder(CrossCutting.Utilities.QueryEvaluator.Core.Conditions.StringStartsWithCondition source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _compareExpression = source.CompareExpression?.ToBuilder()!;
            _sourceExpression = source.SourceExpression?.ToBuilder()!;
            _stringComparison = source.StringComparison;
        }

        public StringStartsWithConditionBuilder() : base()
        {
            _compareExpression = default(CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder)!;
            _sourceExpression = default(CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder)!;
            SetDefaultValues();
        }

        public override CrossCutting.Utilities.QueryEvaluator.Core.Conditions.StringStartsWithCondition BuildTyped()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Core.Conditions.StringStartsWithCondition(Combination, StartGroup, EndGroup, CompareExpression?.Build()!, SourceExpression?.Build()!, StringComparison);
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder.Build()
        {
            return BuildTyped();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.IDoubleExpressionContainer CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IDoubleExpressionContainerBuilder.Build()
        {
            return BuildTyped();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.ISingleExpressionContainer CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISingleExpressionContainerBuilder.Build()
        {
            return BuildTyped();
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.IStringComparisonContainer CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IStringComparisonContainerBuilder.Build()
        {
            return BuildTyped();
        }

        partial void SetDefaultValues();

        public static implicit operator CrossCutting.Utilities.QueryEvaluator.Core.Conditions.StringStartsWithCondition(StringStartsWithConditionBuilder builder)
        {
            return builder.BuildTyped();
        }
    }
}
#nullable disable
