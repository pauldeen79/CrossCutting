// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 9.0.6
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace CrossCutting.Utilities.QueryEvaluator.Builders.Extensions
{
    public static partial class ConditionBuilderExtensions
    {
        public static T WithCombination<T>(this T instance, System.Nullable<CrossCutting.Utilities.QueryEvaluator.Domains.Combination> combination)
            where T : CrossCutting.Utilities.QueryEvaluator.Builders.Abstractions.IConditionBuilder
        {
            instance.Combination = combination;
            return instance;
        }

        public static T WithStartGroup<T>(this T instance, bool startGroup = true)
            where T : CrossCutting.Utilities.QueryEvaluator.Builders.Abstractions.IConditionBuilder
        {
            instance.StartGroup = startGroup;
            return instance;
        }

        public static T WithEndGroup<T>(this T instance, bool endGroup = true)
            where T : CrossCutting.Utilities.QueryEvaluator.Builders.Abstractions.IConditionBuilder
        {
            instance.EndGroup = endGroup;
            return instance;
        }
    }
    public static partial class ExpressionBuilderExtensions
    {
    }
    public static partial class OperatorBuilderExtensions
    {
    }
    public static partial class ParameterizedQueryBuilderExtensions
    {
        public static T AddParameters<T>(this T instance, System.Collections.Generic.IEnumerable<CrossCutting.Utilities.QueryEvaluator.Builders.Abstractions.IQueryParameterBuilder> parameters)
            where T : CrossCutting.Utilities.QueryEvaluator.Builders.Abstractions.IParameterizedQueryBuilder
        {
            if (parameters is null) throw new System.ArgumentNullException(nameof(parameters));
            return instance.AddParameters<T>(parameters.ToArray());
        }

        public static T AddParameters<T>(this T instance, params CrossCutting.Utilities.QueryEvaluator.Builders.Abstractions.IQueryParameterBuilder[] parameters)
            where T : CrossCutting.Utilities.QueryEvaluator.Builders.Abstractions.IParameterizedQueryBuilder
        {
            if (parameters is null) throw new System.ArgumentNullException(nameof(parameters));
            foreach (var item in parameters) instance.Parameters.Add(item);
            return instance;
        }
    }
    public static partial class QueryBuilderExtensions
    {
        public static T AddFilter<T>(this T instance, System.Collections.Generic.IEnumerable<CrossCutting.Utilities.QueryEvaluator.Builders.Abstractions.IConditionBuilder> filter)
            where T : CrossCutting.Utilities.QueryEvaluator.Builders.Abstractions.IQueryBuilder
        {
            if (filter is null) throw new System.ArgumentNullException(nameof(filter));
            return instance.AddFilter<T>(filter.ToArray());
        }

        public static T AddFilter<T>(this T instance, params CrossCutting.Utilities.QueryEvaluator.Builders.Abstractions.IConditionBuilder[] filter)
            where T : CrossCutting.Utilities.QueryEvaluator.Builders.Abstractions.IQueryBuilder
        {
            if (filter is null) throw new System.ArgumentNullException(nameof(filter));
            foreach (var item in filter) instance.Filter.Add(item);
            return instance;
        }

        public static T AddOrderByFields<T>(this T instance, System.Collections.Generic.IEnumerable<CrossCutting.Utilities.QueryEvaluator.Builders.Abstractions.IQuerySortOrderBuilder> orderByFields)
            where T : CrossCutting.Utilities.QueryEvaluator.Builders.Abstractions.IQueryBuilder
        {
            if (orderByFields is null) throw new System.ArgumentNullException(nameof(orderByFields));
            return instance.AddOrderByFields<T>(orderByFields.ToArray());
        }

        public static T AddOrderByFields<T>(this T instance, params CrossCutting.Utilities.QueryEvaluator.Builders.Abstractions.IQuerySortOrderBuilder[] orderByFields)
            where T : CrossCutting.Utilities.QueryEvaluator.Builders.Abstractions.IQueryBuilder
        {
            if (orderByFields is null) throw new System.ArgumentNullException(nameof(orderByFields));
            foreach (var item in orderByFields) instance.OrderByFields.Add(item);
            return instance;
        }

        public static T WithLimit<T>(this T instance, System.Nullable<int> limit)
            where T : CrossCutting.Utilities.QueryEvaluator.Builders.Abstractions.IQueryBuilder
        {
            instance.Limit = limit;
            return instance;
        }

        public static T WithOffset<T>(this T instance, System.Nullable<int> offset)
            where T : CrossCutting.Utilities.QueryEvaluator.Builders.Abstractions.IQueryBuilder
        {
            instance.Offset = offset;
            return instance;
        }
    }
    public static partial class QueryParameterBuilderExtensions
    {
        public static T WithName<T>(this T instance, string name)
            where T : CrossCutting.Utilities.QueryEvaluator.Builders.Abstractions.IQueryParameterBuilder
        {
            if (name is null) throw new System.ArgumentNullException(nameof(name));
            instance.Name = name;
            return instance;
        }

        public static T WithValue<T>(this T instance, object? value)
            where T : CrossCutting.Utilities.QueryEvaluator.Builders.Abstractions.IQueryParameterBuilder
        {
            instance.Value = value;
            return instance;
        }
    }
    public static partial class QueryParameterValueBuilderExtensions
    {
        public static T WithName<T>(this T instance, string name)
            where T : CrossCutting.Utilities.QueryEvaluator.Builders.Abstractions.IQueryParameterValueBuilder
        {
            if (name is null) throw new System.ArgumentNullException(nameof(name));
            instance.Name = name;
            return instance;
        }
    }
    public static partial class QuerySortOrderBuilderExtensions
    {
        public static T WithFieldNameExpression<T>(this T instance, CrossCutting.Utilities.ExpressionEvaluator.IExpression<string> fieldNameExpression)
            where T : CrossCutting.Utilities.QueryEvaluator.Builders.Abstractions.IQuerySortOrderBuilder
        {
            if (fieldNameExpression is null) throw new System.ArgumentNullException(nameof(fieldNameExpression));
            instance.FieldNameExpression = fieldNameExpression;
            return instance;
        }

        public static T WithOrder<T>(this T instance, CrossCutting.Utilities.QueryEvaluator.Domains.QuerySortOrderDirection order)
            where T : CrossCutting.Utilities.QueryEvaluator.Builders.Abstractions.IQuerySortOrderBuilder
        {
            instance.Order = order;
            return instance;
        }
    }
    public static partial class SingleEntityQueryBuilderExtensions
    {
    }
}
#nullable disable
