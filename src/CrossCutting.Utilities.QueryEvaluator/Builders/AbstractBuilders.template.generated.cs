// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 9.0.6
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace CrossCutting.Utilities.QueryEvaluator.Builders
{
    public abstract partial class ConditionBuilder<TBuilder, TEntity> : ConditionBuilder
        where TEntity : CrossCutting.Utilities.QueryEvaluator.Condition
        where TBuilder : ConditionBuilder<TBuilder, TEntity>
    {
        protected ConditionBuilder(CrossCutting.Utilities.QueryEvaluator.Condition source) : base(source)
        {
        }

        protected ConditionBuilder() : base()
        {
        }

        public override CrossCutting.Utilities.QueryEvaluator.Condition Build()
        {
            return BuildTyped();
        }

        public abstract TEntity BuildTyped();

        public TBuilder WithCombination(System.Nullable<CrossCutting.Utilities.QueryEvaluator.Domains.Combination> combination)
        {
            Combination = combination;
            return (TBuilder)this;
        }

        public TBuilder WithStartGroup(bool startGroup = true)
        {
            StartGroup = startGroup;
            return (TBuilder)this;
        }

        public TBuilder WithEndGroup(bool endGroup = true)
        {
            EndGroup = endGroup;
            return (TBuilder)this;
        }

        public static implicit operator CrossCutting.Utilities.QueryEvaluator.Condition(ConditionBuilder<TBuilder, TEntity> entity)
        {
            return entity.BuildTyped();
        }
    }
    public abstract partial class ExpressionBuilder<TBuilder, TEntity> : ExpressionBuilder
        where TEntity : CrossCutting.Utilities.QueryEvaluator.Expression
        where TBuilder : ExpressionBuilder<TBuilder, TEntity>
    {
        protected ExpressionBuilder(CrossCutting.Utilities.QueryEvaluator.Expression source) : base(source)
        {
        }

        protected ExpressionBuilder() : base()
        {
        }

        public override CrossCutting.Utilities.QueryEvaluator.Expression Build()
        {
            return BuildTyped();
        }

        public abstract TEntity BuildTyped();

        public static implicit operator CrossCutting.Utilities.QueryEvaluator.Expression(ExpressionBuilder<TBuilder, TEntity> entity)
        {
            return entity.BuildTyped();
        }
    }
    public abstract partial class QueryBuilder<TBuilder, TEntity> : QueryBuilder
        where TEntity : CrossCutting.Utilities.QueryEvaluator.Query
        where TBuilder : QueryBuilder<TBuilder, TEntity>
    {
        protected QueryBuilder(CrossCutting.Utilities.QueryEvaluator.Query source) : base(source)
        {
        }

        protected QueryBuilder() : base()
        {
        }

        public override CrossCutting.Utilities.QueryEvaluator.Query Build()
        {
            return BuildTyped();
        }

        public abstract TEntity BuildTyped();

        public TBuilder AddFilter(System.Collections.Generic.IEnumerable<CrossCutting.Utilities.QueryEvaluator.Builders.ConditionBuilder> filter)
        {
            if (filter is null) throw new System.ArgumentNullException(nameof(filter));
            return AddFilter(filter.ToArray());
        }

        public TBuilder AddFilter(params CrossCutting.Utilities.QueryEvaluator.Builders.ConditionBuilder[] filter)
        {
            if (filter is null) throw new System.ArgumentNullException(nameof(filter));
            foreach (var item in filter) Filter.Add(item);
            return (TBuilder)this;
        }

        public TBuilder AddOrderByFields(System.Collections.Generic.IEnumerable<CrossCutting.Utilities.QueryEvaluator.Builders.QuerySortOrderBuilder> orderByFields)
        {
            if (orderByFields is null) throw new System.ArgumentNullException(nameof(orderByFields));
            return AddOrderByFields(orderByFields.ToArray());
        }

        public TBuilder AddOrderByFields(params CrossCutting.Utilities.QueryEvaluator.Builders.QuerySortOrderBuilder[] orderByFields)
        {
            if (orderByFields is null) throw new System.ArgumentNullException(nameof(orderByFields));
            foreach (var item in orderByFields) OrderByFields.Add(item);
            return (TBuilder)this;
        }

        public TBuilder WithLimit(System.Nullable<int> limit)
        {
            Limit = limit;
            return (TBuilder)this;
        }

        public TBuilder WithOffset(System.Nullable<int> offset)
        {
            Offset = offset;
            return (TBuilder)this;
        }

        public static implicit operator CrossCutting.Utilities.QueryEvaluator.Query(QueryBuilder<TBuilder, TEntity> entity)
        {
            return entity.BuildTyped();
        }
    }
}
#nullable disable
