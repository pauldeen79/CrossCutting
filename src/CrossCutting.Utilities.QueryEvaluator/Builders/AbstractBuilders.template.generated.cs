// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 9.0.9
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace CrossCutting.Utilities.QueryEvaluator.Core.Builders
{
    public abstract partial class ConditionBaseBuilder<TBuilder, TEntity> : ConditionBaseBuilder, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder
        where TEntity : CrossCutting.Utilities.QueryEvaluator.Core.ConditionBase
        where TBuilder : ConditionBaseBuilder<TBuilder, TEntity>
    {
        protected ConditionBaseBuilder(CrossCutting.Utilities.QueryEvaluator.Core.ConditionBase source) : base(source)
        {
        }

        protected ConditionBaseBuilder() : base()
        {
        }

        public override CrossCutting.Utilities.QueryEvaluator.Core.ConditionBase Build()
        {
            return BuildTyped();
        }

        public abstract TEntity BuildTyped();

        CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder.Build()
        {
            return BuildTyped();
        }

        public static implicit operator CrossCutting.Utilities.QueryEvaluator.Core.ConditionBase(ConditionBaseBuilder<TBuilder, TEntity> builder)
        {
            return builder.BuildTyped();
        }
    }
    public abstract partial class ExpressionBaseBuilder<TBuilder, TEntity> : ExpressionBaseBuilder, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder
        where TEntity : CrossCutting.Utilities.QueryEvaluator.Core.ExpressionBase
        where TBuilder : ExpressionBaseBuilder<TBuilder, TEntity>
    {
        protected ExpressionBaseBuilder(CrossCutting.Utilities.QueryEvaluator.Core.ExpressionBase source) : base(source)
        {
        }

        protected ExpressionBaseBuilder() : base()
        {
        }

        public override CrossCutting.Utilities.QueryEvaluator.Core.ExpressionBase Build()
        {
            return BuildTyped();
        }

        public abstract TEntity BuildTyped();

        CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder.Build()
        {
            return BuildTyped();
        }

        public static implicit operator CrossCutting.Utilities.QueryEvaluator.Core.ExpressionBase(ExpressionBaseBuilder<TBuilder, TEntity> builder)
        {
            return builder.BuildTyped();
        }
    }
    public abstract partial class QueryBaseBuilder<TBuilder, TEntity> : QueryBaseBuilder, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IQueryBuilder
        where TEntity : CrossCutting.Utilities.QueryEvaluator.Core.QueryBase
        where TBuilder : QueryBaseBuilder<TBuilder, TEntity>
    {
        protected QueryBaseBuilder(CrossCutting.Utilities.QueryEvaluator.Core.QueryBase source) : base(source)
        {
        }

        protected QueryBaseBuilder() : base()
        {
        }

        public override CrossCutting.Utilities.QueryEvaluator.Core.QueryBase Build()
        {
            return BuildTyped();
        }

        public abstract TEntity BuildTyped();

        CrossCutting.Utilities.QueryEvaluator.Abstractions.IQuery CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IQueryBuilder.Build()
        {
            return BuildTyped();
        }

        public static implicit operator CrossCutting.Utilities.QueryEvaluator.Core.QueryBase(QueryBaseBuilder<TBuilder, TEntity> builder)
        {
            return builder.BuildTyped();
        }
    }
}
#nullable disable
