// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 9.0.6
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace CrossCutting.Utilities.QueryEvaluator.Core.Builders.Expressions
{
    public partial class FieldNameExpressionBuilder : ExpressionBaseBuilder<FieldNameExpressionBuilder, CrossCutting.Utilities.QueryEvaluator.Core.Expressions.FieldNameExpression>, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder
    {
        private string _fieldName;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string FieldName
        {
            get
            {
                return _fieldName;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_fieldName!, value!);
                _fieldName = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(FieldName));
            }
        }

        public FieldNameExpressionBuilder(CrossCutting.Utilities.QueryEvaluator.Core.Expressions.FieldNameExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _fieldName = source.FieldName;
        }

        public FieldNameExpressionBuilder() : base()
        {
            _fieldName = string.Empty;
            SetDefaultValues();
        }

        public override CrossCutting.Utilities.QueryEvaluator.Core.Expressions.FieldNameExpression BuildTyped()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Core.Expressions.FieldNameExpression(FieldName);
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder.Build()
        {
            return BuildTyped();
        }

        partial void SetDefaultValues();

        public CrossCutting.Utilities.QueryEvaluator.Core.Builders.Expressions.FieldNameExpressionBuilder WithFieldName(string fieldName)
        {
            if (fieldName is null) throw new System.ArgumentNullException(nameof(fieldName));
            FieldName = fieldName;
            return this;
        }

        public static implicit operator CrossCutting.Utilities.QueryEvaluator.Core.Expressions.FieldNameExpression(FieldNameExpressionBuilder entity)
        {
            return entity.BuildTyped();
        }
    }
    public partial class LiteralExpressionBuilder : ExpressionBaseBuilder<LiteralExpressionBuilder, CrossCutting.Utilities.QueryEvaluator.Core.Expressions.LiteralExpression>, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder
    {
        private object? _value;

        public object? Value
        {
            get
            {
                return _value;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Object>.Default.Equals(_value!, value!);
                _value = value;
                if (hasChanged) HandlePropertyChanged(nameof(Value));
            }
        }

        public LiteralExpressionBuilder(CrossCutting.Utilities.QueryEvaluator.Core.Expressions.LiteralExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _value = source.Value;
        }

        public LiteralExpressionBuilder() : base()
        {
            SetDefaultValues();
        }

        public override CrossCutting.Utilities.QueryEvaluator.Core.Expressions.LiteralExpression BuildTyped()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Core.Expressions.LiteralExpression(Value);
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.IExpression CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IExpressionBuilder.Build()
        {
            return BuildTyped();
        }

        partial void SetDefaultValues();

        public CrossCutting.Utilities.QueryEvaluator.Core.Builders.Expressions.LiteralExpressionBuilder WithValue(object? value)
        {
            Value = value;
            return this;
        }

        public static implicit operator CrossCutting.Utilities.QueryEvaluator.Core.Expressions.LiteralExpression(LiteralExpressionBuilder entity)
        {
            return entity.BuildTyped();
        }
    }
}
#nullable disable
