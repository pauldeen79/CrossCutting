// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 9.0.9
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace CrossCutting.Utilities.QueryEvaluator.Core.Builders
{
    public partial class SortOrderBuilder : CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISortOrderBuilder, System.ComponentModel.INotifyPropertyChanged
    {
        private CrossCutting.Utilities.ExpressionEvaluator.Builders.Abstractions.IEvaluatableBuilder _expression;

        private CrossCutting.Utilities.QueryEvaluator.Abstractions.Domains.SortOrderDirection _order;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.ExpressionEvaluator.Builders.Abstractions.IEvaluatableBuilder Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<CrossCutting.Utilities.ExpressionEvaluator.Builders.Abstractions.IEvaluatableBuilder>.Default.Equals(_expression!, value!);
                _expression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Expression));
            }
        }

        public CrossCutting.Utilities.QueryEvaluator.Abstractions.Domains.SortOrderDirection Order
        {
            get
            {
                return _order;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<CrossCutting.Utilities.QueryEvaluator.Abstractions.Domains.SortOrderDirection>.Default.Equals(_order, value);
                _order = value;
                if (hasChanged) HandlePropertyChanged(nameof(Order));
            }
        }

        public SortOrderBuilder(CrossCutting.Utilities.QueryEvaluator.Core.SortOrder source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _expression = source.Expression?.ToBuilder()!;
            _order = source.Order;
        }

        public SortOrderBuilder()
        {
            _expression = default(CrossCutting.Utilities.ExpressionEvaluator.Builders.Abstractions.IEvaluatableBuilder)!;
            SetDefaultValues();
        }

        public CrossCutting.Utilities.QueryEvaluator.Abstractions.ISortOrder Build()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Core.SortOrder(Expression?.Build()!, Order);
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.ISortOrder CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISortOrderBuilder.Build()
        {
            return Build();
        }

        partial void SetDefaultValues();

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
}
#nullable disable
