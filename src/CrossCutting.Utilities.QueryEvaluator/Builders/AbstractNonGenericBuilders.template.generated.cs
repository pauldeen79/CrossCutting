// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 9.0.6
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace CrossCutting.Utilities.QueryEvaluator.Builders
{
    public abstract partial class ConditionBuilder : CrossCutting.Utilities.ExpressionEvaluator.IEvaluatable<bool>, CrossCutting.Utilities.ExpressionEvaluator.IEvaluatable, System.ComponentModel.INotifyPropertyChanged
    {
        private System.Nullable<CrossCutting.Utilities.QueryEvaluator.Domains.Combination> _combination;

        private bool _startGroup;

        private bool _endGroup;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        public System.Nullable<CrossCutting.Utilities.QueryEvaluator.Domains.Combination> Combination
        {
            get
            {
                return _combination;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Nullable<CrossCutting.Utilities.QueryEvaluator.Domains.Combination>>.Default.Equals(_combination, value);
                _combination = value;
                if (hasChanged) HandlePropertyChanged(nameof(Combination));
            }
        }

        public bool StartGroup
        {
            get
            {
                return _startGroup;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_startGroup, value);
                _startGroup = value;
                if (hasChanged) HandlePropertyChanged(nameof(StartGroup));
            }
        }

        public bool EndGroup
        {
            get
            {
                return _endGroup;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_endGroup, value);
                _endGroup = value;
                if (hasChanged) HandlePropertyChanged(nameof(EndGroup));
            }
        }

        protected ConditionBuilder(CrossCutting.Utilities.QueryEvaluator.Condition source)
        {
            _combination = source.Combination;
            _startGroup = source.StartGroup;
            _endGroup = source.EndGroup;
        }

        protected ConditionBuilder()
        {
            SetDefaultValues();
        }

        public abstract CrossCutting.Utilities.QueryEvaluator.Condition Build();

        partial void SetDefaultValues();

        public static implicit operator CrossCutting.Utilities.QueryEvaluator.Condition(ConditionBuilder entity)
        {
            return entity.Build();
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public abstract partial class ExpressionBuilder : System.ComponentModel.INotifyPropertyChanged
    {
        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        protected ExpressionBuilder(CrossCutting.Utilities.QueryEvaluator.Expression source)
        {
        }

        protected ExpressionBuilder()
        {
            SetDefaultValues();
        }

        public abstract CrossCutting.Utilities.QueryEvaluator.Expression Build();

        partial void SetDefaultValues();

        public static implicit operator CrossCutting.Utilities.QueryEvaluator.Expression(ExpressionBuilder entity)
        {
            return entity.Build();
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public abstract partial class OperatorBuilder : System.ComponentModel.INotifyPropertyChanged
    {
        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        protected OperatorBuilder(CrossCutting.Utilities.QueryEvaluator.Operator source)
        {
        }

        protected OperatorBuilder()
        {
            SetDefaultValues();
        }

        public abstract CrossCutting.Utilities.QueryEvaluator.Operator Build();

        partial void SetDefaultValues();

        public static implicit operator CrossCutting.Utilities.QueryEvaluator.Operator(OperatorBuilder entity)
        {
            return entity.Build();
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public abstract partial class QueryBuilder : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Nullable<int> _limit;

        private System.Nullable<int> _offset;

        private System.Collections.Generic.List<CrossCutting.Utilities.QueryEvaluator.Builders.ConditionBuilder> _filter;

        private System.Collections.Generic.List<CrossCutting.Utilities.QueryEvaluator.Builders.QuerySortOrderBuilder> _orderByFields;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        public System.Nullable<int> Limit
        {
            get
            {
                return _limit;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Nullable<System.Int32>>.Default.Equals(_limit, value);
                _limit = value;
                if (hasChanged) HandlePropertyChanged(nameof(Limit));
            }
        }

        public System.Nullable<int> Offset
        {
            get
            {
                return _offset;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Nullable<System.Int32>>.Default.Equals(_offset, value);
                _offset = value;
                if (hasChanged) HandlePropertyChanged(nameof(Offset));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        [CrossCutting.Utilities.QueryEvaluator.Validation.ValidGroupsAttribute]
        public System.Collections.Generic.List<CrossCutting.Utilities.QueryEvaluator.Builders.ConditionBuilder> Filter
        {
            get
            {
                return _filter;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<CrossCutting.Utilities.QueryEvaluator.Builders.ConditionBuilder>>.Default.Equals(_filter!, value!);
                _filter = value;
                if (hasChanged) HandlePropertyChanged(nameof(Filter));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.Generic.List<CrossCutting.Utilities.QueryEvaluator.Builders.QuerySortOrderBuilder> OrderByFields
        {
            get
            {
                return _orderByFields;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<CrossCutting.Utilities.QueryEvaluator.Builders.QuerySortOrderBuilder>>.Default.Equals(_orderByFields!, value!);
                _orderByFields = value;
                if (hasChanged) HandlePropertyChanged(nameof(OrderByFields));
            }
        }

        protected QueryBuilder(CrossCutting.Utilities.QueryEvaluator.Query source)
        {
            _filter = new System.Collections.Generic.List<CrossCutting.Utilities.QueryEvaluator.Builders.ConditionBuilder>();
            _orderByFields = new System.Collections.Generic.List<CrossCutting.Utilities.QueryEvaluator.Builders.QuerySortOrderBuilder>();
            _limit = source.Limit;
            _offset = source.Offset;
            foreach (var item in source.Filter.Select(x => x.ToBuilder())) _filter.Add(item);
            foreach (var item in source.OrderByFields.Select(x => x.ToBuilder())) _orderByFields.Add(item);
        }

        protected QueryBuilder()
        {
            _filter = new System.Collections.Generic.List<CrossCutting.Utilities.QueryEvaluator.Builders.ConditionBuilder>();
            _orderByFields = new System.Collections.Generic.List<CrossCutting.Utilities.QueryEvaluator.Builders.QuerySortOrderBuilder>();
            SetDefaultValues();
        }

        public abstract CrossCutting.Utilities.QueryEvaluator.Query Build();

        partial void SetDefaultValues();

        public static implicit operator CrossCutting.Utilities.QueryEvaluator.Query(QueryBuilder entity)
        {
            return entity.Build();
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
}
#nullable disable
