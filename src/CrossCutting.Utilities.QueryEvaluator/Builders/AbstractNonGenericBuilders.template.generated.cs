// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 9.0.9
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace CrossCutting.Utilities.QueryEvaluator.Core.Builders
{
    public abstract partial class ConditionBaseBuilder : CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder, System.ComponentModel.INotifyPropertyChanged
    {
        private System.Nullable<CrossCutting.Utilities.QueryEvaluator.Abstractions.Domains.Combination> _combination;

        private bool _startGroup;

        private bool _endGroup;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        public System.Nullable<CrossCutting.Utilities.QueryEvaluator.Abstractions.Domains.Combination> Combination
        {
            get
            {
                return _combination;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Nullable<CrossCutting.Utilities.QueryEvaluator.Abstractions.Domains.Combination>>.Default.Equals(_combination, value);
                _combination = value;
                if (hasChanged) HandlePropertyChanged(nameof(Combination));
            }
        }

        public bool StartGroup
        {
            get
            {
                return _startGroup;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_startGroup, value);
                _startGroup = value;
                if (hasChanged) HandlePropertyChanged(nameof(StartGroup));
            }
        }

        public bool EndGroup
        {
            get
            {
                return _endGroup;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_endGroup, value);
                _endGroup = value;
                if (hasChanged) HandlePropertyChanged(nameof(EndGroup));
            }
        }

        protected ConditionBaseBuilder(CrossCutting.Utilities.QueryEvaluator.Core.ConditionBase source)
        {
            _combination = source.Combination;
            _startGroup = source.StartGroup;
            _endGroup = source.EndGroup;
        }

        protected ConditionBaseBuilder()
        {
            SetDefaultValues();
        }

        public abstract CrossCutting.Utilities.QueryEvaluator.Core.ConditionBase Build();

        CrossCutting.Utilities.QueryEvaluator.Abstractions.ICondition CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder.Build()
        {
            return Build();
        }

        partial void SetDefaultValues();

        public static implicit operator CrossCutting.Utilities.QueryEvaluator.Core.ConditionBase(ConditionBaseBuilder builder)
        {
            return builder.Build();
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public abstract partial class QueryBaseBuilder : CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IQueryBuilder, System.ComponentModel.INotifyPropertyChanged
    {
        private System.Nullable<int> _limit;

        private System.Nullable<int> _offset;

        private System.Collections.Generic.List<CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder> _conditions;

        private System.Collections.Generic.List<CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISortOrderBuilder> _sortOrders;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        public System.Nullable<int> Limit
        {
            get
            {
                return _limit;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Nullable<System.Int32>>.Default.Equals(_limit, value);
                _limit = value;
                if (hasChanged) HandlePropertyChanged(nameof(Limit));
            }
        }

        public System.Nullable<int> Offset
        {
            get
            {
                return _offset;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Nullable<System.Int32>>.Default.Equals(_offset, value);
                _offset = value;
                if (hasChanged) HandlePropertyChanged(nameof(Offset));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        [CrossCutting.Utilities.QueryEvaluator.Abstractions.Validation.ValidGroupsAttribute]
        public System.Collections.Generic.List<CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder> Conditions
        {
            get
            {
                return _conditions;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder>>.Default.Equals(_conditions!, value!);
                _conditions = value;
                if (hasChanged) HandlePropertyChanged(nameof(Conditions));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.Generic.List<CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISortOrderBuilder> SortOrders
        {
            get
            {
                return _sortOrders;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISortOrderBuilder>>.Default.Equals(_sortOrders!, value!);
                _sortOrders = value;
                if (hasChanged) HandlePropertyChanged(nameof(SortOrders));
            }
        }

        protected QueryBaseBuilder(CrossCutting.Utilities.QueryEvaluator.Core.QueryBase source)
        {
            _conditions = new System.Collections.Generic.List<CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder>();
            _sortOrders = new System.Collections.Generic.List<CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISortOrderBuilder>();
            _limit = source.Limit;
            _offset = source.Offset;
            foreach (var item in source.Conditions.Select(x => x.ToBuilder())) _conditions.Add(item);
            foreach (var item in source.SortOrders.Select(x => x.ToBuilder())) _sortOrders.Add(item);
        }

        protected QueryBaseBuilder()
        {
            _conditions = new System.Collections.Generic.List<CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IConditionBuilder>();
            _sortOrders = new System.Collections.Generic.List<CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.ISortOrderBuilder>();
            SetDefaultValues();
        }

        public abstract CrossCutting.Utilities.QueryEvaluator.Core.QueryBase Build();

        CrossCutting.Utilities.QueryEvaluator.Abstractions.IQuery CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IQueryBuilder.Build()
        {
            return Build();
        }

        partial void SetDefaultValues();

        public static implicit operator CrossCutting.Utilities.QueryEvaluator.Core.QueryBase(QueryBaseBuilder builder)
        {
            return builder.Build();
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
}
#nullable disable
