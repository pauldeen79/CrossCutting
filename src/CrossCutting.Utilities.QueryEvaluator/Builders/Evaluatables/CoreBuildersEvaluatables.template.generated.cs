// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 9.0.9
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace CrossCutting.Utilities.QueryEvaluator.Core.Builders.Evaluatables
{
    public partial class PropertyNameEvaluatableBuilder : EvaluatableBaseBuilder<PropertyNameEvaluatableBuilder, CrossCutting.Utilities.QueryEvaluator.Core.Evaluatables.PropertyNameEvaluatable>
    {
        private CrossCutting.Utilities.ExpressionEvaluator.Builders.Abstractions.IEvaluatableBuilder _sourceExpression;

        private string _propertyName;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Utilities.ExpressionEvaluator.Builders.Abstractions.IEvaluatableBuilder SourceExpression
        {
            get
            {
                return _sourceExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<CrossCutting.Utilities.ExpressionEvaluator.Builders.Abstractions.IEvaluatableBuilder>.Default.Equals(_sourceExpression!, value!);
                _sourceExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(SourceExpression));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string PropertyName
        {
            get
            {
                return _propertyName;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_propertyName!, value!);
                _propertyName = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(PropertyName));
            }
        }

        public PropertyNameEvaluatableBuilder(CrossCutting.Utilities.QueryEvaluator.Core.Evaluatables.PropertyNameEvaluatable source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _sourceExpression = source.SourceExpression?.ToBuilder()!;
            _propertyName = source.PropertyName;
        }

        public PropertyNameEvaluatableBuilder() : base()
        {
            _sourceExpression = default(CrossCutting.Utilities.ExpressionEvaluator.Builders.Abstractions.IEvaluatableBuilder)!;
            _propertyName = string.Empty;
            SetDefaultValues();
        }

        public override CrossCutting.Utilities.QueryEvaluator.Core.Evaluatables.PropertyNameEvaluatable BuildTyped()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Core.Evaluatables.PropertyNameEvaluatable(SourceExpression?.Build()!, PropertyName);
        }

        partial void SetDefaultValues();

        public CrossCutting.Utilities.QueryEvaluator.Core.Builders.Evaluatables.PropertyNameEvaluatableBuilder WithSourceExpression(CrossCutting.Utilities.ExpressionEvaluator.Builders.Abstractions.IEvaluatableBuilder sourceExpression)
        {
            if (sourceExpression is null) throw new System.ArgumentNullException(nameof(sourceExpression));
            SourceExpression = sourceExpression;
            return this;
        }

        public CrossCutting.Utilities.QueryEvaluator.Core.Builders.Evaluatables.PropertyNameEvaluatableBuilder WithPropertyName(string propertyName)
        {
            if (propertyName is null) throw new System.ArgumentNullException(nameof(propertyName));
            PropertyName = propertyName;
            return this;
        }

        public static implicit operator CrossCutting.Utilities.QueryEvaluator.Core.Evaluatables.PropertyNameEvaluatable(PropertyNameEvaluatableBuilder builder)
        {
            return builder.BuildTyped();
        }
    }
}
#nullable disable
