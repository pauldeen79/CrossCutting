// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 9.0.8
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace CrossCutting.Utilities.QueryEvaluator.Core.Builders.Queries
{
    public partial class ParameterizedQueryBuilder : QueryBaseBuilder<ParameterizedQueryBuilder, CrossCutting.Utilities.QueryEvaluator.Core.Queries.ParameterizedQuery>, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IQueryBuilder
    {
        private System.Collections.Generic.List<CrossCutting.Utilities.QueryEvaluator.Core.Builders.QueryParameterBuilder> _parameters;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.Generic.List<CrossCutting.Utilities.QueryEvaluator.Core.Builders.QueryParameterBuilder> Parameters
        {
            get
            {
                return _parameters;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<CrossCutting.Utilities.QueryEvaluator.Core.Builders.QueryParameterBuilder>>.Default.Equals(_parameters!, value!);
                _parameters = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Parameters));
            }
        }

        public ParameterizedQueryBuilder(CrossCutting.Utilities.QueryEvaluator.Core.Queries.ParameterizedQuery source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _parameters = new System.Collections.Generic.List<CrossCutting.Utilities.QueryEvaluator.Core.Builders.QueryParameterBuilder>();
            if (source.Parameters is not null) foreach (var item in source.Parameters.Select(x => x.ToBuilder())) _parameters.Add(item);
        }

        public ParameterizedQueryBuilder() : base()
        {
            _parameters = new System.Collections.Generic.List<CrossCutting.Utilities.QueryEvaluator.Core.Builders.QueryParameterBuilder>();
            SetDefaultValues();
        }

        public override CrossCutting.Utilities.QueryEvaluator.Core.Queries.ParameterizedQuery BuildTyped()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Core.Queries.ParameterizedQuery(Parameters.Select(x => x.Build()!).ToList().AsReadOnly(), Limit, Offset, Conditions.Select(x => x.Build()!).ToList().AsReadOnly(), SortOrders.Select(x => x.Build()!).ToList().AsReadOnly());
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.IQuery CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IQueryBuilder.Build()
        {
            return BuildTyped();
        }

        partial void SetDefaultValues();

        public CrossCutting.Utilities.QueryEvaluator.Core.Builders.Queries.ParameterizedQueryBuilder AddParameters(System.Collections.Generic.IEnumerable<CrossCutting.Utilities.QueryEvaluator.Core.Builders.QueryParameterBuilder> parameters)
        {
            if (parameters is null) throw new System.ArgumentNullException(nameof(parameters));
            return AddParameters(parameters.ToArray());
        }

        public CrossCutting.Utilities.QueryEvaluator.Core.Builders.Queries.ParameterizedQueryBuilder AddParameters(params CrossCutting.Utilities.QueryEvaluator.Core.Builders.QueryParameterBuilder[] parameters)
        {
            if (parameters is null) throw new System.ArgumentNullException(nameof(parameters));
            foreach (var item in parameters) Parameters.Add(item);
            return this;
        }

        public static implicit operator CrossCutting.Utilities.QueryEvaluator.Core.Queries.ParameterizedQuery(ParameterizedQueryBuilder builder)
        {
            return builder.BuildTyped();
        }
    }
    public partial class SingleEntityQueryBuilder : QueryBaseBuilder<SingleEntityQueryBuilder, CrossCutting.Utilities.QueryEvaluator.Core.Queries.SingleEntityQuery>, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IQueryBuilder
    {
        public SingleEntityQueryBuilder(CrossCutting.Utilities.QueryEvaluator.Core.Queries.SingleEntityQuery source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public SingleEntityQueryBuilder() : base()
        {
            SetDefaultValues();
        }

        public override CrossCutting.Utilities.QueryEvaluator.Core.Queries.SingleEntityQuery BuildTyped()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Core.Queries.SingleEntityQuery(Limit, Offset, Conditions.Select(x => x.Build()!).ToList().AsReadOnly(), SortOrders.Select(x => x.Build()!).ToList().AsReadOnly());
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.IQuery CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IQueryBuilder.Build()
        {
            return BuildTyped();
        }

        partial void SetDefaultValues();

        public static implicit operator CrossCutting.Utilities.QueryEvaluator.Core.Queries.SingleEntityQuery(SingleEntityQueryBuilder builder)
        {
            return builder.BuildTyped();
        }
    }
}
#nullable disable
