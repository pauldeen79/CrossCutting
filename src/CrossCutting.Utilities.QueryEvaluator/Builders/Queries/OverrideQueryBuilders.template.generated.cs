// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 9.0.10
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace CrossCutting.Utilities.QueryEvaluator.Core.Builders.Queries
{
    public partial class SingleEntityQueryBuilder : QueryBaseBuilder<SingleEntityQueryBuilder, CrossCutting.Utilities.QueryEvaluator.Core.Queries.SingleEntityQuery>, CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IQueryBuilder
    {
        public SingleEntityQueryBuilder(CrossCutting.Utilities.QueryEvaluator.Core.Queries.SingleEntityQuery source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public SingleEntityQueryBuilder() : base()
        {
            SetDefaultValues();
        }

        public override CrossCutting.Utilities.QueryEvaluator.Core.Queries.SingleEntityQuery BuildTyped()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Core.Queries.SingleEntityQuery(Limit, Offset, Conditions.Select(x => x.Build()!).ToList().AsReadOnly(), SortOrders.Select(x => x.Build()!).ToList().AsReadOnly());
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.IQuery CrossCutting.Utilities.QueryEvaluator.Abstractions.Builders.IQueryBuilder.Build()
        {
            return BuildTyped();
        }

        partial void SetDefaultValues();

        public static implicit operator CrossCutting.Utilities.QueryEvaluator.Core.Queries.SingleEntityQuery(SingleEntityQueryBuilder builder)
        {
            return builder.BuildTyped();
        }
    }
}
#nullable disable
