// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 9.0.6
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace CrossCutting.Utilities.QueryEvaluator.Builders.Operators
{
    public partial class ContainsOperatorBuilder : OperatorBuilder<ContainsOperatorBuilder, CrossCutting.Utilities.QueryEvaluator.Operators.ContainsOperator>, CrossCutting.Utilities.QueryEvaluator.Builders.Abstractions.IStringComparisonContainerBuilder
    {
        private System.StringComparison _stringComparison;

        public System.StringComparison StringComparison
        {
            get
            {
                return _stringComparison;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.StringComparison>.Default.Equals(_stringComparison, value);
                _stringComparison = value;
                if (hasChanged) HandlePropertyChanged(nameof(StringComparison));
            }
        }

        public ContainsOperatorBuilder(CrossCutting.Utilities.QueryEvaluator.Operators.ContainsOperator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _stringComparison = source.StringComparison;
        }

        public ContainsOperatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override CrossCutting.Utilities.QueryEvaluator.Operators.ContainsOperator BuildTyped()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Operators.ContainsOperator(StringComparison);
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.IStringComparisonContainer CrossCutting.Utilities.QueryEvaluator.Builders.Abstractions.IStringComparisonContainerBuilder.Build()
        {
            return BuildTyped();
        }

        partial void SetDefaultValues();

        public static implicit operator CrossCutting.Utilities.QueryEvaluator.Operators.ContainsOperator(ContainsOperatorBuilder entity)
        {
            return entity.BuildTyped();
        }
    }
    public partial class EndsWithOperatorBuilder : OperatorBuilder<EndsWithOperatorBuilder, CrossCutting.Utilities.QueryEvaluator.Operators.EndsWithOperator>, CrossCutting.Utilities.QueryEvaluator.Builders.Abstractions.IStringComparisonContainerBuilder
    {
        private System.StringComparison _stringComparison;

        public System.StringComparison StringComparison
        {
            get
            {
                return _stringComparison;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.StringComparison>.Default.Equals(_stringComparison, value);
                _stringComparison = value;
                if (hasChanged) HandlePropertyChanged(nameof(StringComparison));
            }
        }

        public EndsWithOperatorBuilder(CrossCutting.Utilities.QueryEvaluator.Operators.EndsWithOperator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _stringComparison = source.StringComparison;
        }

        public EndsWithOperatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override CrossCutting.Utilities.QueryEvaluator.Operators.EndsWithOperator BuildTyped()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Operators.EndsWithOperator(StringComparison);
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.IStringComparisonContainer CrossCutting.Utilities.QueryEvaluator.Builders.Abstractions.IStringComparisonContainerBuilder.Build()
        {
            return BuildTyped();
        }

        partial void SetDefaultValues();

        public static implicit operator CrossCutting.Utilities.QueryEvaluator.Operators.EndsWithOperator(EndsWithOperatorBuilder entity)
        {
            return entity.BuildTyped();
        }
    }
    public partial class EqualsOperatorBuilder : OperatorBuilder<EqualsOperatorBuilder, CrossCutting.Utilities.QueryEvaluator.Operators.EqualsOperator>, CrossCutting.Utilities.QueryEvaluator.Builders.Abstractions.IStringComparisonContainerBuilder
    {
        private System.StringComparison _stringComparison;

        public System.StringComparison StringComparison
        {
            get
            {
                return _stringComparison;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.StringComparison>.Default.Equals(_stringComparison, value);
                _stringComparison = value;
                if (hasChanged) HandlePropertyChanged(nameof(StringComparison));
            }
        }

        public EqualsOperatorBuilder(CrossCutting.Utilities.QueryEvaluator.Operators.EqualsOperator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _stringComparison = source.StringComparison;
        }

        public EqualsOperatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override CrossCutting.Utilities.QueryEvaluator.Operators.EqualsOperator BuildTyped()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Operators.EqualsOperator(StringComparison);
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.IStringComparisonContainer CrossCutting.Utilities.QueryEvaluator.Builders.Abstractions.IStringComparisonContainerBuilder.Build()
        {
            return BuildTyped();
        }

        partial void SetDefaultValues();

        public static implicit operator CrossCutting.Utilities.QueryEvaluator.Operators.EqualsOperator(EqualsOperatorBuilder entity)
        {
            return entity.BuildTyped();
        }
    }
    public partial class GreaterThanOperatorBuilder : OperatorBuilder<GreaterThanOperatorBuilder, CrossCutting.Utilities.QueryEvaluator.Operators.GreaterThanOperator>
    {
        public GreaterThanOperatorBuilder(CrossCutting.Utilities.QueryEvaluator.Operators.GreaterThanOperator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public GreaterThanOperatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override CrossCutting.Utilities.QueryEvaluator.Operators.GreaterThanOperator BuildTyped()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Operators.GreaterThanOperator();
        }

        partial void SetDefaultValues();

        public static implicit operator CrossCutting.Utilities.QueryEvaluator.Operators.GreaterThanOperator(GreaterThanOperatorBuilder entity)
        {
            return entity.BuildTyped();
        }
    }
    public partial class GreaterThanOrEqualOperatorBuilder : OperatorBuilder<GreaterThanOrEqualOperatorBuilder, CrossCutting.Utilities.QueryEvaluator.Operators.GreaterThanOrEqualOperator>
    {
        public GreaterThanOrEqualOperatorBuilder(CrossCutting.Utilities.QueryEvaluator.Operators.GreaterThanOrEqualOperator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public GreaterThanOrEqualOperatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override CrossCutting.Utilities.QueryEvaluator.Operators.GreaterThanOrEqualOperator BuildTyped()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Operators.GreaterThanOrEqualOperator();
        }

        partial void SetDefaultValues();

        public static implicit operator CrossCutting.Utilities.QueryEvaluator.Operators.GreaterThanOrEqualOperator(GreaterThanOrEqualOperatorBuilder entity)
        {
            return entity.BuildTyped();
        }
    }
    public partial class IsNotNullOperatorBuilder : OperatorBuilder<IsNotNullOperatorBuilder, CrossCutting.Utilities.QueryEvaluator.Operators.IsNotNullOperator>
    {
        public IsNotNullOperatorBuilder(CrossCutting.Utilities.QueryEvaluator.Operators.IsNotNullOperator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public IsNotNullOperatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override CrossCutting.Utilities.QueryEvaluator.Operators.IsNotNullOperator BuildTyped()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Operators.IsNotNullOperator();
        }

        partial void SetDefaultValues();

        public static implicit operator CrossCutting.Utilities.QueryEvaluator.Operators.IsNotNullOperator(IsNotNullOperatorBuilder entity)
        {
            return entity.BuildTyped();
        }
    }
    public partial class IsNullOperatorBuilder : OperatorBuilder<IsNullOperatorBuilder, CrossCutting.Utilities.QueryEvaluator.Operators.IsNullOperator>
    {
        public IsNullOperatorBuilder(CrossCutting.Utilities.QueryEvaluator.Operators.IsNullOperator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public IsNullOperatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override CrossCutting.Utilities.QueryEvaluator.Operators.IsNullOperator BuildTyped()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Operators.IsNullOperator();
        }

        partial void SetDefaultValues();

        public static implicit operator CrossCutting.Utilities.QueryEvaluator.Operators.IsNullOperator(IsNullOperatorBuilder entity)
        {
            return entity.BuildTyped();
        }
    }
    public partial class NotContainsOperatorBuilder : OperatorBuilder<NotContainsOperatorBuilder, CrossCutting.Utilities.QueryEvaluator.Operators.NotContainsOperator>, CrossCutting.Utilities.QueryEvaluator.Builders.Abstractions.IStringComparisonContainerBuilder
    {
        private System.StringComparison _stringComparison;

        public System.StringComparison StringComparison
        {
            get
            {
                return _stringComparison;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.StringComparison>.Default.Equals(_stringComparison, value);
                _stringComparison = value;
                if (hasChanged) HandlePropertyChanged(nameof(StringComparison));
            }
        }

        public NotContainsOperatorBuilder(CrossCutting.Utilities.QueryEvaluator.Operators.NotContainsOperator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _stringComparison = source.StringComparison;
        }

        public NotContainsOperatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override CrossCutting.Utilities.QueryEvaluator.Operators.NotContainsOperator BuildTyped()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Operators.NotContainsOperator(StringComparison);
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.IStringComparisonContainer CrossCutting.Utilities.QueryEvaluator.Builders.Abstractions.IStringComparisonContainerBuilder.Build()
        {
            return BuildTyped();
        }

        partial void SetDefaultValues();

        public static implicit operator CrossCutting.Utilities.QueryEvaluator.Operators.NotContainsOperator(NotContainsOperatorBuilder entity)
        {
            return entity.BuildTyped();
        }
    }
    public partial class NotEndsWithOperatorBuilder : OperatorBuilder<NotEndsWithOperatorBuilder, CrossCutting.Utilities.QueryEvaluator.Operators.NotEndsWithOperator>, CrossCutting.Utilities.QueryEvaluator.Builders.Abstractions.IStringComparisonContainerBuilder
    {
        private System.StringComparison _stringComparison;

        public System.StringComparison StringComparison
        {
            get
            {
                return _stringComparison;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.StringComparison>.Default.Equals(_stringComparison, value);
                _stringComparison = value;
                if (hasChanged) HandlePropertyChanged(nameof(StringComparison));
            }
        }

        public NotEndsWithOperatorBuilder(CrossCutting.Utilities.QueryEvaluator.Operators.NotEndsWithOperator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _stringComparison = source.StringComparison;
        }

        public NotEndsWithOperatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override CrossCutting.Utilities.QueryEvaluator.Operators.NotEndsWithOperator BuildTyped()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Operators.NotEndsWithOperator(StringComparison);
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.IStringComparisonContainer CrossCutting.Utilities.QueryEvaluator.Builders.Abstractions.IStringComparisonContainerBuilder.Build()
        {
            return BuildTyped();
        }

        partial void SetDefaultValues();

        public static implicit operator CrossCutting.Utilities.QueryEvaluator.Operators.NotEndsWithOperator(NotEndsWithOperatorBuilder entity)
        {
            return entity.BuildTyped();
        }
    }
    public partial class NotEqualsOperatorBuilder : OperatorBuilder<NotEqualsOperatorBuilder, CrossCutting.Utilities.QueryEvaluator.Operators.NotEqualsOperator>, CrossCutting.Utilities.QueryEvaluator.Builders.Abstractions.IStringComparisonContainerBuilder
    {
        private System.StringComparison _stringComparison;

        public System.StringComparison StringComparison
        {
            get
            {
                return _stringComparison;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.StringComparison>.Default.Equals(_stringComparison, value);
                _stringComparison = value;
                if (hasChanged) HandlePropertyChanged(nameof(StringComparison));
            }
        }

        public NotEqualsOperatorBuilder(CrossCutting.Utilities.QueryEvaluator.Operators.NotEqualsOperator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _stringComparison = source.StringComparison;
        }

        public NotEqualsOperatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override CrossCutting.Utilities.QueryEvaluator.Operators.NotEqualsOperator BuildTyped()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Operators.NotEqualsOperator(StringComparison);
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.IStringComparisonContainer CrossCutting.Utilities.QueryEvaluator.Builders.Abstractions.IStringComparisonContainerBuilder.Build()
        {
            return BuildTyped();
        }

        partial void SetDefaultValues();

        public static implicit operator CrossCutting.Utilities.QueryEvaluator.Operators.NotEqualsOperator(NotEqualsOperatorBuilder entity)
        {
            return entity.BuildTyped();
        }
    }
    public partial class NotStartsWithOperatorBuilder : OperatorBuilder<NotStartsWithOperatorBuilder, CrossCutting.Utilities.QueryEvaluator.Operators.NotStartsWithOperator>, CrossCutting.Utilities.QueryEvaluator.Builders.Abstractions.IStringComparisonContainerBuilder
    {
        private System.StringComparison _stringComparison;

        public System.StringComparison StringComparison
        {
            get
            {
                return _stringComparison;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.StringComparison>.Default.Equals(_stringComparison, value);
                _stringComparison = value;
                if (hasChanged) HandlePropertyChanged(nameof(StringComparison));
            }
        }

        public NotStartsWithOperatorBuilder(CrossCutting.Utilities.QueryEvaluator.Operators.NotStartsWithOperator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _stringComparison = source.StringComparison;
        }

        public NotStartsWithOperatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override CrossCutting.Utilities.QueryEvaluator.Operators.NotStartsWithOperator BuildTyped()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Operators.NotStartsWithOperator(StringComparison);
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.IStringComparisonContainer CrossCutting.Utilities.QueryEvaluator.Builders.Abstractions.IStringComparisonContainerBuilder.Build()
        {
            return BuildTyped();
        }

        partial void SetDefaultValues();

        public static implicit operator CrossCutting.Utilities.QueryEvaluator.Operators.NotStartsWithOperator(NotStartsWithOperatorBuilder entity)
        {
            return entity.BuildTyped();
        }
    }
    public partial class SmallerThanOperatorBuilder : OperatorBuilder<SmallerThanOperatorBuilder, CrossCutting.Utilities.QueryEvaluator.Operators.SmallerThanOperator>
    {
        public SmallerThanOperatorBuilder(CrossCutting.Utilities.QueryEvaluator.Operators.SmallerThanOperator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public SmallerThanOperatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override CrossCutting.Utilities.QueryEvaluator.Operators.SmallerThanOperator BuildTyped()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Operators.SmallerThanOperator();
        }

        partial void SetDefaultValues();

        public static implicit operator CrossCutting.Utilities.QueryEvaluator.Operators.SmallerThanOperator(SmallerThanOperatorBuilder entity)
        {
            return entity.BuildTyped();
        }
    }
    public partial class SmallerThanOrEqualOperatorBuilder : OperatorBuilder<SmallerThanOrEqualOperatorBuilder, CrossCutting.Utilities.QueryEvaluator.Operators.SmallerThanOrEqualOperator>
    {
        public SmallerThanOrEqualOperatorBuilder(CrossCutting.Utilities.QueryEvaluator.Operators.SmallerThanOrEqualOperator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public SmallerThanOrEqualOperatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override CrossCutting.Utilities.QueryEvaluator.Operators.SmallerThanOrEqualOperator BuildTyped()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Operators.SmallerThanOrEqualOperator();
        }

        partial void SetDefaultValues();

        public static implicit operator CrossCutting.Utilities.QueryEvaluator.Operators.SmallerThanOrEqualOperator(SmallerThanOrEqualOperatorBuilder entity)
        {
            return entity.BuildTyped();
        }
    }
    public partial class StartsWithOperatorBuilder : OperatorBuilder<StartsWithOperatorBuilder, CrossCutting.Utilities.QueryEvaluator.Operators.StartsWithOperator>, CrossCutting.Utilities.QueryEvaluator.Builders.Abstractions.IStringComparisonContainerBuilder
    {
        private System.StringComparison _stringComparison;

        public System.StringComparison StringComparison
        {
            get
            {
                return _stringComparison;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.StringComparison>.Default.Equals(_stringComparison, value);
                _stringComparison = value;
                if (hasChanged) HandlePropertyChanged(nameof(StringComparison));
            }
        }

        public StartsWithOperatorBuilder(CrossCutting.Utilities.QueryEvaluator.Operators.StartsWithOperator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _stringComparison = source.StringComparison;
        }

        public StartsWithOperatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override CrossCutting.Utilities.QueryEvaluator.Operators.StartsWithOperator BuildTyped()
        {
            return new CrossCutting.Utilities.QueryEvaluator.Operators.StartsWithOperator(StringComparison);
        }

        CrossCutting.Utilities.QueryEvaluator.Abstractions.IStringComparisonContainer CrossCutting.Utilities.QueryEvaluator.Builders.Abstractions.IStringComparisonContainerBuilder.Build()
        {
            return BuildTyped();
        }

        partial void SetDefaultValues();

        public static implicit operator CrossCutting.Utilities.QueryEvaluator.Operators.StartsWithOperator(StartsWithOperatorBuilder entity)
        {
            return entity.BuildTyped();
        }
    }
}
#nullable disable
